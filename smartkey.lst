

HI-TECH Software PIC PRO Macro Assembler V9.83 build 10920 
                                                                                               Sat Feb 22 12:26:23 2020

HI-TECH Software Omniscient Code Generator (PRO mode) build 10920
     1                           	processor	16F685
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	cinit,global,class=CODE,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	inittext,global,class=CODE,delta=2
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	maintext,global,class=CODE,delta=2
    12                           	psect	swtext1,local,class=CONST,delta=2
    13                           	psect	text502,local,class=CODE,delta=2
    14                           	psect	text503,local,class=CODE,delta=2
    15                           	psect	text504,local,class=CODE,delta=2
    16                           	psect	text505,local,class=CODE,delta=2
    17                           	psect	text506,local,class=CODE,delta=2
    18                           	psect	text507,local,class=CODE,delta=2
    19                           	psect	text508,local,class=CODE,delta=2
    20                           	psect	text509,local,class=CODE,delta=2
    21                           	psect	text510,local,class=CODE,delta=2
    22                           	psect	text511,local,class=CODE,delta=2
    23                           	psect	text512,local,class=CODE,delta=2
    24                           	psect	text513,local,class=CODE,delta=2
    25                           	psect	text514,local,class=CODE,delta=2
    26                           	psect	text515,local,class=CODE,delta=2
    27                           	psect	text516,local,class=CODE,delta=2
    28                           	psect	text517,local,class=CODE,delta=2
    29                           	psect	text518,local,class=CODE,delta=2
    30                           	psect	text519,local,class=CODE,delta=2
    31                           	psect	text520,local,class=CODE,delta=2
    32                           	psect	text521,local,class=CODE,delta=2
    33                           	psect	text522,local,class=CODE,delta=2
    34                           	psect	text523,local,class=CODE,delta=2
    35                           	psect	intentry,global,class=CODE,delta=2
    36                           	psect	text524,local,class=CODE,delta=2
    37                           	psect	pa_nodes,global,class=CODE,delta=2
    38                           	dabs	1,0x11E,1
    39                           	dabs	1,0x11F,1
    40                           	dabs	1,0x119,1
    41                           	dabs	1,0x11A,1
    42                           	dabs	1,0x11B,1
    43                           	dabs	1,0x10F,1
    44                           	dabs	1,0x10E,1
    45                           	dabs	1,0x116,1
    46                           	dabs	1,0x19D,1
    47                           	dabs	1,0x19E,1
    48                           	dabs	1,0x118,1
    49                           	dabs	1,0x115,1
    50                           	dabs	1,0x11E,1
    51                           	dabs	1,0x11E,1
    52                           	dabs	1,0x11F,1
    53                           	dabs	1,0x11F,1
    54                           	dabs	1,0x11E,1
    55                           	dabs	1,0x11E,1
    56                           	dabs	1,0x11E,1
    57                           	dabs	1,0x11E,1
    58                           	dabs	1,0x11E,1
    59                           	dabs	1,0x11E,1
    60                           	dabs	1,0x11F,1
    61                           	dabs	1,0x11F,1
    62                           	dabs	1,0x119,1
    63                           	dabs	1,0x119,1
    64                           	dabs	1,0x119,1
    65                           	dabs	1,0x119,1
    66                           	dabs	1,0x119,1
    67                           	dabs	1,0x119,1
    68                           	dabs	1,0x119,1
    69                           	dabs	1,0x19E,1
    70                           	dabs	1,0x118,1
    71                           	dabs	1,0x11A,1
    72                           	dabs	1,0x11A,1
    73                           	dabs	1,0x11A,1
    74                           	dabs	1,0x11A,1
    75                           	dabs	1,0x11A,1
    76                           	dabs	1,0x11A,1
    77                           	dabs	1,0x11A,1
    78                           	dabs	1,0x19E,1
    79                           	dabs	1,0x11B,1
    80                           	dabs	1,0x118,1
    81                           	dabs	1,0x18C,1
    82                           	dabs	1,0x116,1
    83                           	dabs	1,0x116,1
    84                           	dabs	1,0x116,1
    85                           	dabs	1,0x116,1
    86                           	dabs	1,0x11B,1
    87                           	dabs	1,0x11B,1
    88                           	dabs	1,0x19E,1
    89                           	dabs	1,0x19E,1
    90                           	dabs	1,0x19E,1
    91                           	dabs	1,0x19E,1
    92                           	dabs	1,0x19D,1
    93                           	dabs	1,0x19D,1
    94                           	dabs	1,0x19D,1
    95                           	dabs	1,0x19D,1
    96                           	dabs	1,0x19D,1
    97                           	dabs	1,0x11B,1
    98                           	dabs	1,0x118,1
    99                           	dabs	1,0x118,1
   100                           	dabs	1,0x118,1
   101                           	dabs	1,0x118,1
   102                           	dabs	1,0x118,1
   103                           	dabs	1,0x118,1
   104                           	dabs	1,0x115,1
   105                           	dabs	1,0x115,1
   106                           	dabs	1,0x115,1
   107                           	dabs	1,0x115,1
   108                           	dabs	1,0x18C,1
   109                           	dabs	1,0x7E,2
   110  000A                     
   111                           	psect	idataBANK0
   112  038E                     __pidataBANK0:	
   113                           
   114                           ;initializer for id_clear@F1098
   115  038E  34FF               	retlw	255
   116  038F  34FF               	retlw	255
   117  0390  34FF               	retlw	255
   118  0391  34FF               	retlw	255
   119  0392  34FF               	retlw	255
   120                           
   121                           ;initializer for _buffTag
   122  0393  3400               	retlw	0
   123  0394  3400               	retlw	0
   124  0395  3411               	retlw	17
   125  0396  340B               	retlw	11
   126  0397  344F               	retlw	79
   127  0398  3400               	retlw	0
   128  0399  3400               	retlw	0
   129  039A  3481               	retlw	129
   130  039B  342F               	retlw	47
   131  039C  3422               	retlw	34
   132  039D  3400               	retlw	0
   133  039E  3400               	retlw	0
   134  039F  347D               	retlw	125
   135  03A0  3467               	retlw	103
   136  03A1  3405               	retlw	5
   137  03A2  3400               	retlw	0
   138  03A3  3400               	retlw	0
   139  03A4  347E               	retlw	126
   140  03A5  3431               	retlw	49
   141  03A6  34E7               	retlw	231
   142  03A7  3400               	retlw	0
   143  03A8  3400               	retlw	0
   144  03A9  347E               	retlw	126
   145  03AA  3451               	retlw	81
   146  03AB  34E6               	retlw	230
   147  011E                     _ANSEL	set	286	;_ANSEL
   148  011F                     _ANSELH	set	287	;_ANSELH
   149  0119                     _CM1CON0	set	281	;_CM1CON0
   150  011A                     _CM2CON0	set	282	;_CM2CON0
   151  011B                     _CM2CON1	set	283	;_CM2CON1
   152  010F                     _EEADRH	set	271	;_EEADRH
   153  010E                     _EEDATH	set	270	;_EEDATH
   154  0116                     _IOCB	set	278	;_IOCB
   155  019D                     _PSTRCON	set	413	;_PSTRCON
   156  019E                     _SRCON	set	414	;_SRCON
   157  0118                     _VRCON	set	280	;_VRCON
   158  0115                     _WPUB	set	277	;_WPUB
   159  08F0                     _ANS0	set	2288	;_ANS0
   160  08F1                     _ANS1	set	2289	;_ANS1
   161  08FA                     _ANS10	set	2298	;_ANS10
   162  08FB                     _ANS11	set	2299	;_ANS11
   163  08F2                     _ANS2	set	2290	;_ANS2
   164  08F3                     _ANS3	set	2291	;_ANS3
   165  08F4                     _ANS4	set	2292	;_ANS4
   166  08F5                     _ANS5	set	2293	;_ANS5
   167  08F6                     _ANS6	set	2294	;_ANS6
   168  08F7                     _ANS7	set	2295	;_ANS7
   169  08F8                     _ANS8	set	2296	;_ANS8
   170  08F9                     _ANS9	set	2297	;_ANS9
   171  08C8                     _C1CH0	set	2248	;_C1CH0
   172  08C9                     _C1CH1	set	2249	;_C1CH1
   173  08CD                     _C1OE	set	2253	;_C1OE
   174  08CF                     _C1ON	set	2255	;_C1ON
   175  08CE                     _C1OUT	set	2254	;_C1OUT
   176  08CC                     _C1POL	set	2252	;_C1POL
   177  08CA                     _C1R	set	2250	;_C1R
   178  0CF5                     _C1SEN	set	3317	;_C1SEN
   179  08C7                     _C1VREN	set	2247	;_C1VREN
   180  08D0                     _C2CH0	set	2256	;_C2CH0
   181  08D1                     _C2CH1	set	2257	;_C2CH1
   182  08D5                     _C2OE	set	2261	;_C2OE
   183  08D7                     _C2ON	set	2263	;_C2ON
   184  08D6                     _C2OUT	set	2262	;_C2OUT
   185  08D4                     _C2POL	set	2260	;_C2POL
   186  08D2                     _C2R	set	2258	;_C2R
   187  0CF4                     _C2REN	set	3316	;_C2REN
   188  08D8                     _C2SYNC	set	2264	;_C2SYNC
   189  08C6                     _C2VREN	set	2246	;_C2VREN
   190  0C67                     _EEPGD	set	3175	;_EEPGD
   191  08B4                     _IOCB4	set	2228	;_IOCB4
   192  08B5                     _IOCB5	set	2229	;_IOCB5
   193  08B6                     _IOCB6	set	2230	;_IOCB6
   194  08B7                     _IOCB7	set	2231	;_IOCB7
   195  08DF                     _MC1OUT	set	2271	;_MC1OUT
   196  08DE                     _MC2OUT	set	2270	;_MC2OUT
   197  0CF2                     _PULSR	set	3314	;_PULSR
   198  0CF3                     _PULSS	set	3315	;_PULSS
   199  0CF6                     _SR0	set	3318	;_SR0
   200  0CF7                     _SR1	set	3319	;_SR1
   201  0CE8                     _STRA	set	3304	;_STRA
   202  0CE9                     _STRB	set	3305	;_STRB
   203  0CEA                     _STRC	set	3306	;_STRC
   204  0CEB                     _STRD	set	3307	;_STRD
   205  0CEC                     _STRSYNC	set	3308	;_STRSYNC
   206  08D9                     _T1GSS	set	2265	;_T1GSS
   207  08C4                     _VP6EN	set	2244	;_VP6EN
   208  08C0                     _VR0	set	2240	;_VR0
   209  08C1                     _VR1	set	2241	;_VR1
   210  08C2                     _VR2	set	2242	;_VR2
   211  08C3                     _VR3	set	2243	;_VR3
   212  08C5                     _VRR	set	2245	;_VRR
   213  08AC                     _WPUB4	set	2220	;_WPUB4
   214  08AD                     _WPUB5	set	2221	;_WPUB5
   215  08AE                     _WPUB6	set	2222	;_WPUB6
   216  08AF                     _WPUB7	set	2223	;_WPUB7
   217  0C62                     _WREN	set	3170	;_WREN
   218  000B                     _INTCON	set	11
   219  0014                     _P1ADTH	set	20
   220  000E                     _P1ADTL	set	14
   221  0016                     _P1CON	set	22
   222  000C                     _PIR1	set	12
   223  0005                     _PORTA	set	5
   224  0007                     _PORTC	set	7
   225  0012                     _T2CON0	set	18
   226  0013                     _TMR2H	set	19
   227  0011                     _TMR2L	set	17
   228  0067                     _EEIF	set	103
   229  005F                     _GIE	set	95
   230  005E                     _PEIE	set	94
   231  002B                     _RA3	set	43
   232  002D                     _RA5	set	45
   233  0038                     _RC0	set	56
   234  005D                     _T0IE	set	93
   235  005A                     _T0IF	set	90
   236  00FB                     _T0ON	set	251
   237  0061                     _TMR2IF	set	97
   238  0092                     _TMR2ON	set	146
   239  009B                     _EEADR	set	155
   240  009C                     _EECON1	set	156
   241  009A                     _EEDAT	set	154
   242  0081                     _OPTION	set	129
   243  008F                     _OSCCON	set	143
   244  0090                     _P1OE	set	144
   245  0099                     _P1POL	set	153
   246  008C                     _PIE1	set	140
   247  0092                     _PR2H	set	146
   248  0091                     _PR2L	set	145
   249  009E                     _T2CON1	set	158
   250  0085                     _TRISA	set	133
   251  0087                     _TRISC	set	135
   252  0095                     _WPUA	set	149
   253  0093                     _WPUC	set	147
   254  047A                     _HTS	set	1146
   255  04E0                     _RD	set	1248
   256  0461                     _TMR2IE	set	1121
   257  04E8                     _WR	set	1256
   258  0001                     _TMR0	set	1
   259                           
   260                           	psect	cinit
   261  03E1                     start_initialization:	
   262  03E1  303E               	movlw	low (__pdataBANK0+30)
   263                           
   264                           ; Clear objects allocated to BANK0
   265  03E2  01D8               	clrf	__pbssBANK0& (0+127)
   266  03E3  01D9               	clrf	(__pbssBANK0+1)& (0+127)
   267  03E4  01DA               	clrf	(__pbssBANK0+2)& (0+127)
   268  03E5  01DB               	clrf	(__pbssBANK0+3)& (0+127)
   269  03E6  01DC               	clrf	(__pbssBANK0+4)& (0+127)
   270  03E7  01DD               	clrf	(__pbssBANK0+5)& (0+127)
   271  03E8  01DE               	clrf	(__pbssBANK0+6)& (0+127)
   272  03E9  01DF               	clrf	(__pbssBANK0+7)& (0+127)
   273  03EA  01E0               	clrf	(__pbssBANK0+8)& (0+127)
   274  03EB  01E1               	clrf	(__pbssBANK0+9)& (0+127)
   275  03EC  01E2               	clrf	(__pbssBANK0+10)& (0+127)
   276                           
   277                           ; Initialize objects allocated to BANK0
   278  03ED  1383               	bcf	3,7	;select IRP bank0
   279  03EE  00FD               	movwf	125
   280  03EF  3003               	movlw	high __pidataBANK0
   281  03F0  00FE               	movwf	126
   282  03F1  308E               	movlw	low __pidataBANK0
   283  03F2  00FF               	movwf	127
   284  03F3  3020               	movlw	low __pdataBANK0
   285  03F4  0084               	movwf	4
   286  03F5  2444               	fcall	init_ram
   287  03F6                     end_of_initialization:	
   288                           ;End of C runtime variable initialization code
   289                           
   290  03F6  0183               	clrf	3
   291  03F7  2955               	ljmp	_main	;jump to C main() function
   292                           
   293                           	psect	bssBANK0
   294  0058                     __pbssBANK0:	
   295  0058                     _timeOut:	
   296  0058                     	ds	2
   297  005A                     _timeTick:	
   298  005A                     	ds	2
   299  005C                     _kepTag:	
   300  005C                     	ds	1
   301  005D                     _mtState:	
   302  005D                     	ds	1
   303  005E                     _keyID:	
   304  005E                     	ds	5
   305                           
   306                           	psect	dataBANK0
   307  0020                     __pdataBANK0:	
   308  0020                     id_clear@F1098:	
   309  0020                     	ds	5
   310  0025                     _buffTag:	
   311  0025                     	ds	25
   312                           
   313                           	psect	inittext
   314  0440                     init_fetch:	
   315                           ;	Called with low address in FSR and high address in W
   316                           
   317  0440  087E               	movf	126,w
   318  0441  008A               	movwf	10
   319  0442  087F               	movf	127,w
   320  0443  0082               	movwf	2
   321  0444                     init_ram:	
   322                           ;Called with:
   323                           ;	high address of idata address in btemp 
   324                           ;	low address of idata address in btemp+1 
   325                           ;	low address of data in FSR
   326                           ;	high address + 1 of data in btemp-1
   327                           
   328  0444  2440               	fcall	init_fetch
   329  0445  0080               	movwf	0
   330  0446  0A84               	incf	4,f
   331  0447  0804               	movf	4,w
   332  0448  067D               	xorwf	125,w
   333  0449  1903               	btfsc	3,2
   334  044A  3400               	retlw	0
   335  044B  0AFF               	incf	127,f
   336  044C  1903               	btfsc	3,2
   337  044D  0AFE               	incf	126,f
   338  044E  2C44               	goto	init_ram
   339                           
   340                           	psect	cstackCOMMON
   341  0070                     __pcstackCOMMON:	
   342  0070                     ?_sys_init:	
   343  0070                     ?_gpio_init:	
   344                           ; 0 bytes @ 0x0
   345                           
   346  0070                     ?_timer_init:	
   347                           ; 0 bytes @ 0x0
   348                           
   349  0070                     ?_int_init:	
   350                           ; 0 bytes @ 0x0
   351                           
   352  0070                     ?_SET_EPWM_ON:	
   353                           ; 0 bytes @ 0x0
   354                           
   355  0070                     ?_delay_x10ms:	
   356                           ; 0 bytes @ 0x0
   357                           
   358  0070                     ?_ISR:	
   359                           ; 0 bytes @ 0x0
   360                           
   361  0070                     ??_ISR:	
   362                           ; 0 bytes @ 0x0
   363                           
   364  0070                     ?_main:	
   365                           ; 0 bytes @ 0x0
   366                           
   367  0070                     ?_eepromReadByte:	
   368                           ; 0 bytes @ 0x0
   369                           
   370  0070                     ?_get_RFID:	
   371                           ; 1 bytes @ 0x0
   372                           
   373                           
   374                           ; 1 bytes @ 0x0
   375  0070                     	ds	2
   376  0072                     ??_sys_init:	
   377  0072                     ??_gpio_init:	
   378                           ; 0 bytes @ 0x2
   379                           
   380  0072                     ??_timer_init:	
   381                           ; 0 bytes @ 0x2
   382                           
   383  0072                     ??_int_init:	
   384                           ; 0 bytes @ 0x2
   385                           
   386  0072                     ??_eepromReadByte:	
   387                           ; 0 bytes @ 0x2
   388                           
   389  0072                     ?_eepromWriteByte:	
   390                           ; 0 bytes @ 0x2
   391                           
   392  0072                     ??_SET_EPWM_ON:	
   393                           ; 0 bytes @ 0x2
   394                           
   395  0072                     ??_delay_x10ms:	
   396                           ; 0 bytes @ 0x2
   397                           
   398  0072                     ?_setState:	
   399                           ; 0 bytes @ 0x2
   400                           
   401  0072                     ?_comArr:	
   402                           ; 0 bytes @ 0x2
   403                           
   404  0072                     ?___bmul:	
   405                           ; 1 bytes @ 0x2
   406                           
   407  0072                     ?___lbdiv:	
   408                           ; 1 bytes @ 0x2
   409                           
   410  0072                     ?_timerOut:	
   411                           ; 1 bytes @ 0x2
   412                           
   413  0072                     ?___lwmod:	
   414                           ; 2 bytes @ 0x2
   415                           
   416  0072                     eepromReadByte@EEAddr:	
   417                           ; 2 bytes @ 0x2
   418                           
   419  0072                     eepromWriteByte@EEData:	
   420                           ; 1 bytes @ 0x2
   421                           
   422  0072                     comArr@arr2:	
   423                           ; 1 bytes @ 0x2
   424                           
   425  0072                     ___bmul@multiplicand:	
   426                           ; 1 bytes @ 0x2
   427                           
   428  0072                     ___lbdiv@divisor:	
   429                           ; 1 bytes @ 0x2
   430                           
   431  0072                     timerOut@time:	
   432                           ; 1 bytes @ 0x2
   433                           
   434  0072                     setState@_tOut:	
   435                           ; 2 bytes @ 0x2
   436                           
   437  0072                     ___lwmod@divisor:	
   438                           ; 2 bytes @ 0x2
   439                           
   440                           
   441                           ; 2 bytes @ 0x2
   442  0072                     	ds	1
   443  0073                     ??_eepromWriteByte:	
   444  0073                     ??___bmul:	
   445                           ; 0 bytes @ 0x3
   446                           
   447  0073                     ??___lbdiv:	
   448                           ; 0 bytes @ 0x3
   449                           
   450  0073                     eepromReadByte@ReEepromData:	
   451                           ; 0 bytes @ 0x3
   452                           
   453  0073                     comArr@len1:	
   454                           ; 1 bytes @ 0x3
   455                           
   456  0073                     ___bmul@product:	
   457                           ; 1 bytes @ 0x3
   458                           
   459  0073                     ___lbdiv@dividend:	
   460                           ; 1 bytes @ 0x3
   461                           
   462                           
   463                           ; 1 bytes @ 0x3
   464  0073                     	ds	1
   465  0074                     ?_eepromReadBlock:	
   466  0074                     ??_timerOut:	
   467                           ; 0 bytes @ 0x4
   468                           
   469  0074                     ??_setState:	
   470                           ; 0 bytes @ 0x4
   471                           
   472  0074                     eepromReadBlock@buff:	
   473                           ; 0 bytes @ 0x4
   474                           
   475  0074                     comArr@len2:	
   476                           ; 1 bytes @ 0x4
   477                           
   478  0074                     timerOut@Logic:	
   479                           ; 1 bytes @ 0x4
   480                           
   481  0074                     delay_x10ms@t:	
   482                           ; 1 bytes @ 0x4
   483                           
   484  0074                     setState@stt:	
   485                           ; 1 bytes @ 0x4
   486                           
   487  0074                     ___bmul@multiplier:	
   488                           ; 1 bytes @ 0x4
   489                           
   490  0074                     ___lbdiv@counter:	
   491                           ; 1 bytes @ 0x4
   492                           
   493  0074                     ___lwmod@dividend:	
   494                           ; 1 bytes @ 0x4
   495                           
   496                           
   497                           ; 2 bytes @ 0x4
   498  0074                     	ds	1
   499  0075                     ??_comArr:	
   500  0075                     ?_beep2:	
   501                           ; 0 bytes @ 0x5
   502                           
   503  0075                     eepromReadBlock@len:	
   504                           ; 0 bytes @ 0x5
   505                           
   506  0075                     eepromWriteByte@EEAddr:	
   507                           ; 1 bytes @ 0x5
   508                           
   509  0075                     beep2@rep:	
   510                           ; 1 bytes @ 0x5
   511                           
   512  0075                     ___lbdiv@quotient:	
   513                           ; 1 bytes @ 0x5
   514                           
   515  0075                     timerOut@CurTimer:	
   516                           ; 1 bytes @ 0x5
   517                           
   518                           
   519                           ; 2 bytes @ 0x5
   520  0075                     	ds	1
   521  0076                     ??_eepromReadBlock:	
   522  0076                     ?_eepromWriteBlock:	
   523                           ; 0 bytes @ 0x6
   524                           
   525  0076                     ??_beep2:	
   526                           ; 0 bytes @ 0x6
   527                           
   528  0076                     ??___lwmod:	
   529                           ; 0 bytes @ 0x6
   530                           
   531  0076                     eepromWriteBlock@buff:	
   532                           ; 0 bytes @ 0x6
   533                           
   534  0076                     beep2@sel:	
   535                           ; 1 bytes @ 0x6
   536                           
   537  0076                     ___lwmod@counter:	
   538                           ; 1 bytes @ 0x6
   539                           
   540                           
   541                           ; 1 bytes @ 0x6
   542  0076                     	ds	1
   543  0077                     ??_get_RFID:	
   544  0077                     eepromReadBlock@addStart:	
   545                           ; 0 bytes @ 0x7
   546                           
   547  0077                     eepromWriteBlock@len:	
   548                           ; 1 bytes @ 0x7
   549                           
   550                           
   551                           ; 1 bytes @ 0x7
   552  0077                     	ds	1
   553  0078                     ??_eepromWriteBlock:	
   554  0078                     eepromReadBlock@i:	
   555                           ; 0 bytes @ 0x8
   556                           
   557  0078                     comArr@arr1:	
   558                           ; 1 bytes @ 0x8
   559                           
   560                           
   561                           ; 1 bytes @ 0x8
   562  0078                     	ds	1
   563  0079                     eepromWriteBlock@addStart:	
   564  0079                     comArr@i:	
   565                           ; 1 bytes @ 0x9
   566                           
   567                           
   568                           ; 1 bytes @ 0x9
   569  0079                     	ds	1
   570  007A                     ?_id_search:	
   571  007A                     eepromWriteBlock@i:	
   572                           ; 1 bytes @ 0xA
   573                           
   574  007A                     id_search@buff:	
   575                           ; 1 bytes @ 0xA
   576                           
   577                           
   578                           ; 1 bytes @ 0xA
   579  007A                     	ds	1
   580  007B                     ??_id_search:	
   581  007B                     id_replate@id:	
   582                           ; 0 bytes @ 0xB
   583                           
   584                           
   585                           ; 1 bytes @ 0xB
   586  007B                     	ds	1
   587  007C                     ??_id_clear:	
   588                           
   589                           	psect	cstackBANK0
   590  003E                     __pcstackBANK0:	
   591                           ; 0 bytes @ 0xC
   592                           
   593  003E                     ?_id_replate:	
   594  003E                     id_search@id_input:	
   595                           ; 0 bytes @ 0x0
   596                           
   597  003E                     id_replate@Cont:	
   598                           ; 1 bytes @ 0x0
   599                           
   600  003E                     get_RFID@RF_serial_55bits:	
   601                           ; 1 bytes @ 0x0
   602                           
   603                           
   604                           ; 11 bytes @ 0x0
   605  003E                     	ds	1
   606  003F                     id_search@i:	
   607  003F                     id_replate@buff:	
   608                           ; 1 bytes @ 0x1
   609                           
   610                           
   611                           ; 1 bytes @ 0x1
   612  003F                     	ds	1
   613  0040                     ??_id_replate:	
   614                           
   615                           ; 0 bytes @ 0x2
   616  0040                     	ds	2
   617  0042                     ?_id_clear:	
   618  0042                     id_clear@idMax:	
   619                           ; 0 bytes @ 0x4
   620                           
   621                           
   622                           ; 1 bytes @ 0x4
   623  0042                     	ds	1
   624  0043                     id_clear@tmp:	
   625                           
   626                           ; 5 bytes @ 0x5
   627  0043                     	ds	5
   628  0048                     id_clear@idMin:	
   629                           
   630                           ; 1 bytes @ 0xA
   631  0048                     	ds	1
   632  0049                     get_RFID@flag_RFID_syn:	
   633                           
   634                           ; 1 bytes @ 0xB
   635  0049                     	ds	1
   636  004A                     get_RFID@even_col:	
   637                           
   638                           ; 1 bytes @ 0xC
   639  004A                     	ds	1
   640  004B                     get_RFID@even_row:	
   641                           
   642                           ; 1 bytes @ 0xD
   643  004B                     	ds	1
   644  004C                     get_RFID@j:	
   645                           
   646                           ; 1 bytes @ 0xE
   647  004C                     	ds	1
   648  004D                     get_RFID@i:	
   649                           
   650                           ; 1 bytes @ 0xF
   651  004D                     	ds	1
   652  004E                     get_RFID@flag_RFID_last:	
   653                           
   654                           ; 1 bytes @ 0x10
   655  004E                     	ds	1
   656  004F                     get_RFID@timeOutVal:	
   657                           
   658                           ; 2 bytes @ 0x11
   659  004F                     	ds	2
   660  0051                     get_RFID@ii:	
   661                           
   662                           ; 1 bytes @ 0x13
   663  0051                     	ds	1
   664  0052                     ??_main:	
   665                           
   666                           ; 0 bytes @ 0x14
   667  0052                     	ds	3
   668  0055                     main@idState:	
   669                           
   670                           ; 1 bytes @ 0x17
   671  0055                     	ds	1
   672  0056                     main@tmp:	
   673                           
   674                           ; 1 bytes @ 0x18
   675  0056                     	ds	1
   676  0057                     main@idop:	
   677                           
   678                           ; 1 bytes @ 0x19
   679  0057                     	ds	1
   680                           
   681                           	psect	maintext
   682  0155                     __pmaintext:	
   683 ;;Data sizes: Strings 0, constant 0, data 30, bss 11, persistent 0 stack 0
   684 ;;Auto spaces:   Size  Autos    Used
   685 ;; COMMON          14     12      12
   686 ;; BANK0           80     26      67
   687 ;; BANK1           32      0       0
   688 ;;
   689 ;; Pointer list with targets:
   690 ;; ?___lwmod	unsigned int  size(1) Largest target is 0
   691 ;;
   692 ;; ?_timerOut	unsigned int  size(1) Largest target is 1
   693 ;;		 -> TMR0(BITSFR0[1]), 
   694 ;;
   695 ;; id_replate@Cont	PTR unsigned char  size(1) Largest target is 5
   696 ;;		 -> id_clear@tmp(BANK0[5]), keyID(BANK0[5]), 
   697 ;;
   698 ;; id_replate@buff	PTR unsigned char  size(1) Largest target is 25
   699 ;;		 -> buffTag(BANK0[25]), 
   700 ;;
   701 ;; id_search@buff	PTR unsigned char  size(1) Largest target is 25
   702 ;;		 -> buffTag(BANK0[25]), 
   703 ;;
   704 ;; id_search@id_input	PTR unsigned char  size(1) Largest target is 5
   705 ;;		 -> keyID(BANK0[5]), 
   706 ;;
   707 ;; comArr@arr2	PTR unsigned char  size(1) Largest target is 25
   708 ;;		 -> buffTag(BANK0[25]), 
   709 ;;
   710 ;; comArr@arr1	PTR unsigned char  size(1) Largest target is 5
   711 ;;		 -> keyID(BANK0[5]), 
   712 ;;
   713 ;; eepromWriteBlock@buff	PTR unsigned char  size(1) Largest target is 25
   714 ;;		 -> buffTag(BANK0[25]), 
   715 ;;
   716 ;; eepromReadBlock@buff	PTR unsigned char  size(1) Largest target is 25
   717 ;;		 -> buffTag(BANK0[25]), 
   718 ;;
   719 ;;
   720 ;; Critical Paths under _main in COMMON
   721 ;;
   722 ;;   _main->_id_search
   723 ;;   _main->_id_replate
   724 ;;   _id_clear->_id_replate
   725 ;;   _id_replate->_eepromWriteBlock
   726 ;;   _beep2->_delay_x10ms
   727 ;;   _eepromWriteBlock->_eepromWriteByte
   728 ;;   _id_search->_comArr
   729 ;;   _get_RFID->_timerOut
   730 ;;   _eepromReadBlock->_eepromReadByte
   731 ;;
   732 ;; Critical Paths under _ISR in COMMON
   733 ;;
   734 ;;   None.
   735 ;;
   736 ;; Critical Paths under _main in BANK0
   737 ;;
   738 ;;   _main->_get_RFID
   739 ;;   _id_clear->_id_replate
   740 ;;
   741 ;; Critical Paths under _ISR in BANK0
   742 ;;
   743 ;;   None.
   744 ;;
   745 ;; Critical Paths under _main in BANK1
   746 ;;
   747 ;;   None.
   748 ;;
   749 ;; Critical Paths under _ISR in BANK1
   750 ;;
   751 ;;   None.
   752 ;;
   753 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   754 ;;
   755 ;;
   756 ;;Call Graph Tables:
   757 ;;
   758 ;; ---------------------------------------------------------------------------------
   759 ;; (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
   760 ;; ---------------------------------------------------------------------------------
   761 ;; (0) _main                                                10    10      0    4698
   762 ;;                                             20 BANK0      6     6      0
   763 ;;                           _sys_init
   764 ;;                          _gpio_init
   765 ;;                         _timer_init
   766 ;;                           _int_init
   767 ;;                    _eepromWriteByte
   768 ;;                        _SET_EPWM_ON
   769 ;;                     _eepromReadByte
   770 ;;                    _eepromReadBlock
   771 ;;                           _setState
   772 ;;                           _get_RFID
   773 ;;                          _id_search
   774 ;;                           _id_clear
   775 ;;                              _beep2
   776 ;;                         _id_replate
   777 ;;                            ___lwmod
   778 ;; ---------------------------------------------------------------------------------
   779 ;; (1) _id_clear                                             7     6      1     718
   780 ;;                                              4 BANK0      7     6      1
   781 ;;                         _id_replate
   782 ;; ---------------------------------------------------------------------------------
   783 ;; (1) _id_replate                                           5     3      2     623
   784 ;;                                             11 COMMON     1     1      0
   785 ;;                                              0 BANK0      4     2      2
   786 ;;                             ___bmul
   787 ;;                   _eepromWriteBlock
   788 ;; ---------------------------------------------------------------------------------
   789 ;; (1) _beep2                                                2     1      1      88
   790 ;;                                              5 COMMON     2     1      1
   791 ;;                        _delay_x10ms
   792 ;; ---------------------------------------------------------------------------------
   793 ;; (2) _eepromWriteBlock                                     5     3      2     178
   794 ;;                                              6 COMMON     5     3      2
   795 ;;                    _eepromWriteByte
   796 ;; ---------------------------------------------------------------------------------
   797 ;; (1) _id_search                                            4     3      1     518
   798 ;;                                             10 COMMON     2     1      1
   799 ;;                                              0 BANK0      2     2      0
   800 ;;                             _comArr
   801 ;;                            ___lbdiv
   802 ;; ---------------------------------------------------------------------------------
   803 ;; (2) _delay_x10ms                                          3     3      0      22
   804 ;;                                              2 COMMON     3     3      0
   805 ;; ---------------------------------------------------------------------------------
   806 ;; (1) _get_RFID                                            21    21      0    1917
   807 ;;                                              7 COMMON     1     1      0
   808 ;;                                              0 BANK0     20    20      0
   809 ;;                           _timerOut
   810 ;;                            ___lbdiv
   811 ;; ---------------------------------------------------------------------------------
   812 ;; (3) _eepromWriteByte                                      4     3      1      44
   813 ;;                                              2 COMMON     4     3      1
   814 ;; ---------------------------------------------------------------------------------
   815 ;; (1) _eepromReadBlock                                      5     3      2     179
   816 ;;                                              4 COMMON     5     3      2
   817 ;;                     _eepromReadByte
   818 ;; ---------------------------------------------------------------------------------
   819 ;; (1) _sys_init                                             0     0      0       0
   820 ;; ---------------------------------------------------------------------------------
   821 ;; (2) ___lbdiv                                              4     3      1     162
   822 ;;                                              2 COMMON     4     3      1
   823 ;; ---------------------------------------------------------------------------------
   824 ;; (1) ___lwmod                                              5     1      4     159
   825 ;;                                              2 COMMON     5     1      4
   826 ;; ---------------------------------------------------------------------------------
   827 ;; (2) ___bmul                                               3     2      1      92
   828 ;;                                              2 COMMON     3     2      1
   829 ;; ---------------------------------------------------------------------------------
   830 ;; (1) _setState                                             3     1      2      44
   831 ;;                                              2 COMMON     3     1      2
   832 ;; ---------------------------------------------------------------------------------
   833 ;; (1) _SET_EPWM_ON                                          0     0      0       0
   834 ;; ---------------------------------------------------------------------------------
   835 ;; (2) _timerOut                                             5     3      2      90
   836 ;;                                              2 COMMON     5     3      2
   837 ;; ---------------------------------------------------------------------------------
   838 ;; (2) _comArr                                               8     5      3     222
   839 ;;                                              2 COMMON     8     5      3
   840 ;; ---------------------------------------------------------------------------------
   841 ;; (2) _eepromReadByte                                       2     2      0      45
   842 ;;                                              2 COMMON     2     2      0
   843 ;; ---------------------------------------------------------------------------------
   844 ;; (1) _int_init                                             0     0      0       0
   845 ;; ---------------------------------------------------------------------------------
   846 ;; (1) _timer_init                                           0     0      0       0
   847 ;; ---------------------------------------------------------------------------------
   848 ;; (1) _gpio_init                                            0     0      0       0
   849 ;; ---------------------------------------------------------------------------------
   850 ;; Estimated maximum stack depth 3
   851 ;; ---------------------------------------------------------------------------------
   852 ;; (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
   853 ;; ---------------------------------------------------------------------------------
   854 ;; (5) _ISR                                                  2     2      0       0
   855 ;;                                              0 COMMON     2     2      0
   856 ;; ---------------------------------------------------------------------------------
   857 ;; Estimated maximum stack depth 5
   858 ;; ---------------------------------------------------------------------------------
   859 ;; Call Graph Graphs:
   860 ;; _main (ROOT)
   861 ;;   _sys_init
   862 ;;   _gpio_init
   863 ;;   _timer_init
   864 ;;   _int_init
   865 ;;   _eepromWriteByte
   866 ;;   _SET_EPWM_ON
   867 ;;   _eepromReadByte
   868 ;;   _eepromReadBlock
   869 ;;     _eepromReadByte
   870 ;;   _setState
   871 ;;   _get_RFID
   872 ;;     _timerOut
   873 ;;     ___lbdiv
   874 ;;   _id_search
   875 ;;     _comArr
   876 ;;     ___lbdiv
   877 ;;   _id_clear
   878 ;;     _id_replate
   879 ;;       ___bmul
   880 ;;       _eepromWriteBlock
   881 ;;         _eepromWriteByte
   882 ;;   _beep2
   883 ;;     _delay_x10ms
   884 ;;   _id_replate
   885 ;;     ___bmul
   886 ;;     _eepromWriteBlock
   887 ;;       _eepromWriteByte
   888 ;;   ___lwmod
   889 ;;
   890 ;; _ISR (ROOT)
   891 ;;
   892 ;; Address spaces:
   893 ;;Name               Size   Autos  Total    Cost      Usage
   894 ;;SFR1                 0      0       0       2        0.0%
   895 ;;BITSFR1              0      0       0       2        0.0%
   896 ;;BANK1               20      0       0       5        0.0%
   897 ;;BITBANK1            20      0       0       7        0.0%
   898 ;;CODE                 0      0       0       0        0.0%
   899 ;;DATA                 0      0      53       8        0.0%
   900 ;;ABS                  0      0      4F       6        0.0%
   901 ;;NULL                 0      0       0       0        0.0%
   902 ;;STACK                0      0       4       2        0.0%
   903 ;;BANK0               50     1A      43       4       83.8%
   904 ;;BITBANK0            50      0       0       3        0.0%
   905 ;;SFR0                 0      0       0       1        0.0%
   906 ;;BITSFR0              0      0       0       1        0.0%
   907 ;;COMMON               E      C       C       1       85.7%
   908 ;;BITCOMMON            E      0       0       0        0.0%
   909 ;;EEDATA             100      0       0       0        0.0%
   910                           
   911                           
   912 ;; *************** function _main *****************
   913 ;; Defined at:
   914 ;;		line 193 in file "MAIN.C"
   915 ;; Parameters:    Size  Location     Type
   916 ;;		None
   917 ;; Auto vars:     Size  Location     Type
   918 ;;  t               2    0        unsigned int 
   919 ;;  idop            1   25[BANK0 ] unsigned char 
   920 ;;  tmp             1   24[BANK0 ] unsigned char 
   921 ;;  idState         1   23[BANK0 ] unsigned char 
   922 ;;  t1              1    0        unsigned char 
   923 ;;  buzFre          1    0        unsigned char 
   924 ;; Return value:  Size  Location     Type
   925 ;;		None               void
   926 ;; Registers used:
   927 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   928 ;; Tracked objects:
   929 ;;		On entry : 17F/0
   930 ;;		On exit  : 20/0
   931 ;;		Unchanged: 0/0
   932 ;; Data sizes:     COMMON   BANK0   BANK1
   933 ;;      Params:         0       0       0
   934 ;;      Locals:         0       3       0
   935 ;;      Temps:          0       3       0
   936 ;;      Totals:         0       6       0
   937 ;;Total ram usage:        6 bytes
   938 ;; Hardware stack levels required when called:    5
   939 ;; This function calls:
   940 ;;		_sys_init
   941 ;;		_gpio_init
   942 ;;		_timer_init
   943 ;;		_int_init
   944 ;;		_eepromWriteByte
   945 ;;		_SET_EPWM_ON
   946 ;;		_eepromReadByte
   947 ;;		_eepromReadBlock
   948 ;;		_setState
   949 ;;		_get_RFID
   950 ;;		_id_search
   951 ;;		_id_clear
   952 ;;		_beep2
   953 ;;		_id_replate
   954 ;;		___lwmod
   955 ;; This function is called by:
   956 ;;		Startup code after reset
   957 ;; This function uses a non-reentrant model
   958 ;;
   959  0155                     _main:	
   960                           
   961                           ;MAIN.C: 195: unsigned int t;
   962                           ;MAIN.C: 196: unsigned char buzFre = 0;
   963                           
   964                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   965  0155  01D5               	clrf	main@idState
   966  0156  0064               	clrwdt	;#
   967                           
   968                           ;MAIN.C: 200: sys_init();
   969  0157  2482               	fcall	_sys_init
   970                           
   971                           ;MAIN.C: 201: gpio_init();
   972  0158  244F               	fcall	_gpio_init
   973                           
   974                           ;MAIN.C: 203: timer_init();
   975  0159  24A0               	fcall	_timer_init
   976                           
   977                           ;MAIN.C: 204: int_init();
   978  015A  246C               	fcall	_int_init
   979                           
   980                           ;MAIN.C: 210: eepromWriteByte(0xFF, 0xAA);
   981  015B  30AA               	movlw	170
   982  015C  00F2               	movwf	?_eepromWriteByte
   983  015D  30FF               	movlw	255
   984  015E  22F1               	fcall	_eepromWriteByte
   985                           
   986                           ;MAIN.C: 211: eepromWriteByte(0xFF, 0xAA);
   987  015F  30AA               	movlw	170
   988  0160  00F2               	movwf	?_eepromWriteByte
   989  0161  30FF               	movlw	255
   990  0162  22F1               	fcall	_eepromWriteByte
   991                           
   992                           ;MAIN.C: 214: TRISC &= 0xfe;
   993  0163  1683               	bsf	3,5	;RP0=1, select bank1
   994  0164  1007               	bcf	7,0	;volatile
   995                           
   996                           ;MAIN.C: 216: SET_EPWM_ON();
   997  0165  2331               	fcall	_SET_EPWM_ON
   998                           
   999                           ;MAIN.C: 220: _delay((unsigned long)((20)*(8000000/4000.0)));
  1000  0166  3034               	movlw	52
  1001  0167  1283               	bcf	3,5	;RP0=0, select bank0
  1002  0168  00D3               	movwf	??_main+1
  1003  0169  30F1               	movlw	241
  1004  016A  00D2               	movwf	??_main
  1005  016B                     u1897:	
  1006  016B  0BD2               	decfsz	??_main,f
  1007  016C  296B               	goto	u1897
  1008  016D  0BD3               	decfsz	??_main+1,f
  1009  016E  296B               	goto	u1897
  1010  016F  2970               	nop2
  1011                           
  1012                           ;MAIN.C: 225: if (eepromReadByte(0x06) != 0) {
  1013  0170  3006               	movlw	6
  1014  0171  248A               	fcall	_eepromReadByte
  1015  0172  3A00               	xorlw	0
  1016  0173  1903               	skipnz
  1017  0174  2987               	goto	l6528
  1018  0175  3006               	movlw	6
  1019                           
  1020                           ;MAIN.C: 229: eepromWriteByte(0x06, 0);
  1021  0176  01F2               	clrf	?_eepromWriteByte
  1022  0177  22F1               	fcall	_eepromWriteByte
  1023  0178  3007               	movlw	7
  1024                           
  1025                           ;MAIN.C: 230: eepromWriteByte(0x06 + 1, 0);
  1026  0179  01F2               	clrf	?_eepromWriteByte
  1027  017A  22F1               	fcall	_eepromWriteByte
  1028                           
  1029                           ;MAIN.C: 231: eepromWriteByte(0x06 + 2, 0x87);
  1030  017B  3087               	movlw	135
  1031  017C  00F2               	movwf	?_eepromWriteByte
  1032  017D  3008               	movlw	8
  1033  017E  22F1               	fcall	_eepromWriteByte
  1034                           
  1035                           ;MAIN.C: 232: eepromWriteByte(0x06 + 3, 0x3a);
  1036  017F  303A               	movlw	58
  1037  0180  00F2               	movwf	?_eepromWriteByte
  1038  0181  3009               	movlw	9
  1039  0182  22F1               	fcall	_eepromWriteByte
  1040                           
  1041                           ;MAIN.C: 233: eepromWriteByte(0x06 + 4, 0xf8);
  1042  0183  30F8               	movlw	248
  1043  0184  00F2               	movwf	?_eepromWriteByte
  1044  0185  300A               	movlw	10
  1045  0186  22F1               	fcall	_eepromWriteByte
  1046  0187                     l6528:	
  1047                           
  1048                           ;MAIN.C: 235: }
  1049                           ;MAIN.C: 236: eepromReadBlock(0x06, buffTag, 5 * 5);
  1050  0187  3025               	movlw	_buffTag& (0+255)
  1051  0188  00F4               	movwf	?_eepromReadBlock
  1052  0189  3019               	movlw	25
  1053  018A  00F5               	movwf	?_eepromReadBlock+1
  1054  018B  3006               	movlw	6
  1055  018C  241F               	fcall	_eepromReadBlock
  1056                           
  1057                           ;MAIN.C: 238: setState(1, 12);
  1058  018D  300C               	movlw	12
  1059  018E  00F2               	movwf	?_setState
  1060  018F  3001               	movlw	1
  1061  0190  01F3               	clrf	?_setState+1
  1062  0191  2478               	fcall	_setState
  1063                           
  1064                           ;MAIN.C: 242: tmp = 0;
  1065  0192  01D6               	clrf	main@tmp
  1066  0193                     l6534:	
  1067                           
  1068                           ;MAIN.C: 246: if (kepTag == 0)
  1069  0193  08DC               	movf	_kepTag,f
  1070  0194  1D03               	skipz
  1071  0195  2998               	goto	l6538
  1072                           
  1073                           ;MAIN.C: 247: idop = get_RFID();
  1074  0196  200B               	fcall	_get_RFID
  1075  0197  00D7               	movwf	main@idop
  1076  0198                     l6538:	
  1077                           
  1078                           ;MAIN.C: 249: if (idop && (kepTag == 0)) {
  1079  0198  0857               	movf	main@idop,w
  1080  0199  1903               	btfsc	3,2
  1081  019A  2A40               	goto	l6622
  1082  019B  08DC               	movf	_kepTag,f
  1083  019C  1D03               	skipz
  1084  019D  2A40               	goto	l6622
  1085                           
  1086                           ;MAIN.C: 250: idop = id_search(keyID, buffTag);
  1087  019E  3025               	movlw	_buffTag& (0+255)
  1088  019F  00FA               	movwf	?_id_search
  1089  01A0  305E               	movlw	_keyID& (0+255)
  1090  01A1  23C7               	fcall	_id_search
  1091  01A2  00D7               	movwf	main@idop
  1092                           
  1093                           ;MAIN.C: 251: switch (mtState) {
  1094  01A3  2A28               	goto	l6618
  1095  01A4                     l6544:	
  1096                           
  1097                           ;MAIN.C: 253: case 2:
  1098                           ;MAIN.C: 254: if ((idop > 1) && (idop < 6))
  1099  01A4  3002               	movlw	2
  1100  01A5  0257               	subwf	main@idop,w
  1101  01A6  1C03               	skipc
  1102  01A7  29B1               	goto	l6550
  1103  01A8  3006               	movlw	6
  1104  01A9  0257               	subwf	main@idop,w
  1105  01AA  1803               	skipnc
  1106  01AB  29B1               	goto	l6550
  1107  01AC  3000               	movlw	0
  1108                           
  1109                           ;MAIN.C: 255: {
  1110                           ;MAIN.C: 256: setState(0, 0);
  1111  01AD  01F2               	clrf	?_setState
  1112  01AE  01F3               	clrf	?_setState+1
  1113  01AF  2478               	fcall	_setState
  1114                           
  1115                           ;MAIN.C: 258: }
  1116  01B0  2A33               	goto	l4171
  1117  01B1                     l6550:	
  1118                           
  1119                           ;MAIN.C: 259: else if (idop == 1)
  1120  01B1  0B57               	decfsz	main@idop,w
  1121  01B2  2A33               	goto	l4171
  1122                           
  1123                           ;MAIN.C: 260: {
  1124                           ;MAIN.C: 262: id_clear(2, 5);
  1125  01B3  3005               	movlw	5
  1126  01B4  00C2               	movwf	?_id_clear
  1127  01B5  3002               	movlw	2
  1128  01B6  2312               	fcall	_id_clear
  1129  01B7  3003               	movlw	3
  1130                           
  1131                           ;MAIN.C: 263: setState(3, 0);
  1132  01B8  01F2               	clrf	?_setState
  1133  01B9  01F3               	clrf	?_setState+1
  1134  01BA  2478               	fcall	_setState
  1135  01BB  3003               	movlw	3
  1136                           
  1137                           ;MAIN.C: 264: tmp = 1;
  1138  01BC  01D6               	clrf	main@tmp
  1139  01BD  0AD6               	incf	main@tmp,f
  1140                           
  1141                           ;MAIN.C: 266: beep2(0, 3);
  1142  01BE  00F5               	movwf	?_beep2
  1143  01BF  3000               	movlw	0
  1144  01C0  23F8               	fcall	_beep2
  1145  01C1  2A33               	goto	l4171
  1146  01C2                     l6560:	
  1147                           
  1148                           ;MAIN.C: 277: if (idop == 1 && idState == 0) {
  1149  01C2  0B57               	decfsz	main@idop,w
  1150  01C3  29D6               	goto	l6572
  1151  01C4  08D5               	movf	main@idState,f
  1152  01C5  1D03               	skipz
  1153  01C6  29D6               	goto	l6572
  1154                           
  1155                           ;MAIN.C: 279: id_clear(2, 5);
  1156  01C7  3005               	movlw	5
  1157  01C8  00C2               	movwf	?_id_clear
  1158  01C9  3002               	movlw	2
  1159  01CA  2312               	fcall	_id_clear
  1160  01CB  3003               	movlw	3
  1161                           
  1162                           ;MAIN.C: 280: setState(3, 0);
  1163  01CC  01F2               	clrf	?_setState
  1164  01CD  01F3               	clrf	?_setState+1
  1165  01CE  2478               	fcall	_setState
  1166  01CF  3003               	movlw	3
  1167                           
  1168                           ;MAIN.C: 281: tmp = 1;
  1169  01D0  01D6               	clrf	main@tmp
  1170  01D1  0AD6               	incf	main@tmp,f
  1171                           
  1172                           ;MAIN.C: 283: beep2(0, 3);
  1173  01D2  00F5               	movwf	?_beep2
  1174  01D3  3000               	movlw	0
  1175  01D4  23F8               	fcall	_beep2
  1176                           
  1177                           ;MAIN.C: 284: }
  1178  01D5  2A33               	goto	l4171
  1179  01D6                     l6572:	
  1180                           
  1181                           ;MAIN.C: 285: else if (idop == 2 && idState == 0) {
  1182  01D6  0857               	movf	main@idop,w
  1183  01D7  3A02               	xorlw	2
  1184  01D8  1D03               	skipz
  1185  01D9  2A33               	goto	l4171
  1186  01DA  08D5               	movf	main@idState,f
  1187  01DB  1D03               	skipz
  1188  01DC  2A33               	goto	l4171
  1189                           
  1190                           ;MAIN.C: 287: id_clear(3, 5);
  1191  01DD  3005               	movlw	5
  1192  01DE  00C2               	movwf	?_id_clear
  1193  01DF  3003               	movlw	3
  1194  01E0  2312               	fcall	_id_clear
  1195  01E1  3005               	movlw	5
  1196                           
  1197                           ;MAIN.C: 288: setState(5, 0);
  1198  01E2  01F2               	clrf	?_setState
  1199  01E3  01F3               	clrf	?_setState+1
  1200  01E4  2478               	fcall	_setState
  1201                           
  1202                           ;MAIN.C: 289: tmp = 2;
  1203  01E5  3002               	movlw	2
  1204  01E6  00D6               	movwf	main@tmp
  1205                           
  1206                           ;MAIN.C: 291: beep2(1, 2);
  1207  01E7  00F5               	movwf	?_beep2
  1208  01E8  3001               	movlw	1
  1209  01E9  23F8               	fcall	_beep2
  1210  01EA  2A33               	goto	l4171
  1211  01EB                     l6584:	
  1212                           
  1213                           ;MAIN.C: 296: if (idState == 0) {
  1214  01EB  08D5               	movf	main@idState,f
  1215  01EC  1D03               	skipz
  1216  01ED  2A04               	goto	l6598
  1217                           
  1218                           ;MAIN.C: 303: if ( idop != 1) {
  1219  01EE  0357               	decf	main@idop,w
  1220  01EF  1903               	skipnz
  1221  01F0  2A33               	goto	l4171
  1222  01F1  3006               	movlw	6
  1223                           
  1224                           ;MAIN.C: 304: tmp++;
  1225  01F2  0AD6               	incf	main@tmp,f
  1226                           
  1227                           ;MAIN.C: 306: if (tmp <= 5) {
  1228  01F3  0256               	subwf	main@tmp,w
  1229  01F4  1803               	skipnc
  1230  01F5  2A33               	goto	l4171
  1231                           
  1232                           ;MAIN.C: 307: id_replate(tmp, keyID, buffTag);
  1233  01F6  305E               	movlw	_keyID& (0+255)
  1234  01F7  00BE               	movwf	?_id_replate
  1235  01F8  3025               	movlw	_buffTag& (0+255)
  1236  01F9  00BF               	movwf	?_id_replate+1
  1237  01FA  0856               	movf	main@tmp,w
  1238  01FB  2292               	fcall	_id_replate
  1239  01FC  3002               	movlw	2
  1240                           
  1241                           ;MAIN.C: 308: timeTick = 0;
  1242  01FD  1283               	bcf	3,5	;RP0=0, select bank0
  1243  01FE  01DA               	clrf	_timeTick
  1244  01FF  01DB               	clrf	_timeTick+1
  1245                           
  1246                           ;MAIN.C: 310: beep2(1, 2);
  1247  0200  00F5               	movwf	?_beep2
  1248  0201  3001               	movlw	1
  1249  0202  23F8               	fcall	_beep2
  1250  0203  2A33               	goto	l4171
  1251  0204                     l6598:	
  1252  0204  3000               	movlw	0
  1253                           
  1254                           ;MAIN.C: 317: beep2(0, 1);
  1255  0205  01F5               	clrf	?_beep2
  1256  0206  0AF5               	incf	?_beep2,f
  1257  0207  23F8               	fcall	_beep2
  1258  0208  2A33               	goto	l4171
  1259  0209                     l6600:	
  1260                           
  1261                           ;MAIN.C: 322: if (idState == 0) {
  1262  0209  08D5               	movf	main@idState,f
  1263  020A  1D03               	skipz
  1264  020B  2A23               	goto	l6614
  1265                           
  1266                           ;MAIN.C: 323: if ( idop > 2) {
  1267  020C  3003               	movlw	3
  1268  020D  0257               	subwf	main@idop,w
  1269  020E  1C03               	skipc
  1270  020F  2A33               	goto	l4171
  1271  0210  3006               	movlw	6
  1272                           
  1273                           ;MAIN.C: 324: tmp++;
  1274  0211  0AD6               	incf	main@tmp,f
  1275                           
  1276                           ;MAIN.C: 326: if (tmp <= 5) {
  1277  0212  0256               	subwf	main@tmp,w
  1278  0213  1803               	skipnc
  1279  0214  2A33               	goto	l4171
  1280                           
  1281                           ;MAIN.C: 327: id_replate(tmp, keyID, buffTag);
  1282  0215  305E               	movlw	_keyID& (0+255)
  1283  0216  00BE               	movwf	?_id_replate
  1284  0217  3025               	movlw	_buffTag& (0+255)
  1285  0218  00BF               	movwf	?_id_replate+1
  1286  0219  0856               	movf	main@tmp,w
  1287  021A  2292               	fcall	_id_replate
  1288  021B  3002               	movlw	2
  1289                           
  1290                           ;MAIN.C: 328: timeTick = 0;
  1291  021C  1283               	bcf	3,5	;RP0=0, select bank0
  1292  021D  01DA               	clrf	_timeTick
  1293  021E  01DB               	clrf	_timeTick+1
  1294                           
  1295                           ;MAIN.C: 330: beep2(1, 2);
  1296  021F  00F5               	movwf	?_beep2
  1297  0220  3001               	movlw	1
  1298  0221  23F8               	fcall	_beep2
  1299  0222  2A33               	goto	l4171
  1300  0223                     l6614:	
  1301  0223  3000               	movlw	0
  1302                           
  1303                           ;MAIN.C: 337: beep2(0, 1);
  1304  0224  01F5               	clrf	?_beep2
  1305  0225  0AF5               	incf	?_beep2,f
  1306  0226  23F8               	fcall	_beep2
  1307  0227  2A33               	goto	l4171
  1308  0228                     l6618:	
  1309  0228  085D               	movf	_mtState,w
  1310                           
  1311                           ; Switch size 1, requested type "space"
  1312                           ; Number of cases is 6, Range of values is 0 to 6
  1313                           ; switch strategies available:
  1314                           ; Name         Instructions Cycles
  1315                           ; direct_byte           13     6 (fixed)
  1316                           ; simple_byte           19    10 (average)
  1317                           ; jumptable            260     6 (fixed)
  1318                           ; rangetable            11     6 (fixed)
  1319                           ; spacedrange           20     9 (fixed)
  1320                           ; locatedrange           7     3 (fixed)
  1321                           ;	Chosen strategy is direct_byte
  1322  0229  0084               	movwf	4
  1323  022A  3007               	movlw	7
  1324  022B  0204               	subwf	4,w
  1325  022C  1803               	skipnc
  1326  022D  2A33               	goto	l4171
  1327  022E  3004               	movlw	high S6688
  1328  022F  008A               	movwf	10
  1329  0230  3092               	movlw	low S6688
  1330  0231  0704               	addwf	4,w
  1331  0232  0082               	movwf	2
  1332  0233                     l4171:	
  1333  0233  309F               	movlw	159
  1334                           
  1335                           ;MAIN.C: 343: idState = 1;
  1336  0234  1283               	bcf	3,5	;RP0=0, select bank0
  1337  0235  01D5               	clrf	main@idState
  1338  0236  0AD5               	incf	main@idState,f
  1339                           
  1340                           ;MAIN.C: 344: _delay((unsigned long)((61)*(8000000/4000.0)));
  1341  0237  00D3               	movwf	??_main+1
  1342  0238  306F               	movlw	111
  1343  0239  00D2               	movwf	??_main
  1344  023A                     u1907:	
  1345  023A  0BD2               	decfsz	??_main,f
  1346  023B  2A3A               	goto	u1907
  1347  023C  0BD3               	decfsz	??_main+1,f
  1348  023D  2A3A               	goto	u1907
  1349  023E  2A3F               	nop2
  1350                           
  1351                           ;MAIN.C: 345: }
  1352  023F  2A4D               	goto	l6626
  1353  0240                     l6622:	
  1354  0240  3002               	movlw	2
  1355                           
  1356                           ;MAIN.C: 346: else {
  1357                           ;MAIN.C: 347: idState = 0;
  1358  0241  01D5               	clrf	main@idState
  1359                           
  1360                           ;MAIN.C: 348: _delay((unsigned long)((150)*(8000000/4000.0)));
  1361  0242  00D4               	movwf	??_main+2
  1362  0243  3086               	movlw	134
  1363  0244  00D3               	movwf	??_main+1
  1364  0245  3099               	movlw	153
  1365  0246  00D2               	movwf	??_main
  1366  0247                     u1917:	
  1367  0247  0BD2               	decfsz	??_main,f
  1368  0248  2A47               	goto	u1917
  1369  0249  0BD3               	decfsz	??_main+1,f
  1370  024A  2A47               	goto	u1917
  1371  024B  0BD4               	decfsz	??_main+2,f
  1372  024C  2A47               	goto	u1917
  1373  024D                     l6626:	
  1374                           
  1375                           ;MAIN.C: 349: }
  1376                           ;MAIN.C: 353: if ((timeOut != 0) && ( timeTick > timeOut)) {
  1377  024D  1283               	bcf	3,5	;RP0=0, select bank0
  1378  024E  0859               	movf	_timeOut+1,w
  1379  024F  0458               	iorwf	_timeOut,w
  1380  0250  1903               	skipnz
  1381  0251  2A74               	goto	l6640
  1382  0252  085B               	movf	_timeTick+1,w
  1383  0253  0259               	subwf	_timeOut+1,w
  1384  0254  1D03               	skipz
  1385  0255  2A58               	goto	u1855
  1386  0256  085A               	movf	_timeTick,w
  1387  0257  0258               	subwf	_timeOut,w
  1388  0258                     u1855:	
  1389  0258  1C03               	btfss	3,0
  1390  0259  2A69               	goto	l6638
  1391  025A  2A74               	goto	l6640
  1392  025B                     l6632:	
  1393                           
  1394                           ;MAIN.C: 358: setState(2, 255);
  1395  025B  30FF               	movlw	255
  1396  025C  00F2               	movwf	?_setState
  1397  025D  3002               	movlw	2
  1398  025E  01F3               	clrf	?_setState+1
  1399  025F  2478               	fcall	_setState
  1400                           
  1401                           ;MAIN.C: 360: break;
  1402  0260  2A74               	goto	l6640
  1403  0261                     l4194:	
  1404                           ;MAIN.C: 361: case 2:
  1405                           
  1406                           
  1407                           ;MAIN.C: 362: kepTag = 1;
  1408  0261  01DC               	clrf	_kepTag
  1409  0262  0ADC               	incf	_kepTag,f
  1410                           
  1411                           ;MAIN.C: 364: break;
  1412  0263  2A74               	goto	l6640
  1413  0264                     l6634:	
  1414  0264  3002               	movlw	2
  1415                           
  1416                           ;MAIN.C: 366: setState(2, 0);
  1417  0265  01F2               	clrf	?_setState
  1418  0266  01F3               	clrf	?_setState+1
  1419  0267  2478               	fcall	_setState
  1420                           
  1421                           ;MAIN.C: 369: break;
  1422  0268  2A74               	goto	l6640
  1423  0269                     l6638:	
  1424  0269  085D               	movf	_mtState,w
  1425                           
  1426                           ; Switch size 1, requested type "space"
  1427                           ; Number of cases is 3, Range of values is 1 to 6
  1428                           ; switch strategies available:
  1429                           ; Name         Instructions Cycles
  1430                           ; simple_byte           10     6 (average)
  1431                           ; direct_byte           15     9 (fixed)
  1432                           ; jumptable            263     9 (fixed)
  1433                           ;	Chosen strategy is simple_byte
  1434  026A  3A01               	xorlw	1	; case 1
  1435  026B  1903               	skipnz
  1436  026C  2A5B               	goto	l6632
  1437  026D  3A03               	xorlw	3	; case 2
  1438  026E  1903               	skipnz
  1439  026F  2A61               	goto	l4194
  1440  0270  3A04               	xorlw	4	; case 6
  1441  0271  1903               	skipnz
  1442  0272  2A64               	goto	l6634
  1443  0273  2A74               	goto	l6640
  1444  0274                     l6640:	
  1445                           
  1446                           ;MAIN.C: 372: }
  1447                           ;MAIN.C: 375: if (mtState == 0) RA3 = 1;
  1448  0274  08DD               	movf	_mtState,f
  1449  0275  1D03               	skipz
  1450  0276  2A79               	goto	l4196
  1451  0277  1585               	bsf	5,3
  1452  0278  2A7A               	goto	l6644
  1453  0279                     l4196:	
  1454                           
  1455                           ;MAIN.C: 376: else RA3 = 0;
  1456  0279  1185               	bcf	5,3
  1457  027A                     l6644:	
  1458                           
  1459                           ;MAIN.C: 392: if (mtState == 2) {
  1460  027A  085D               	movf	_mtState,w
  1461  027B  3A02               	xorlw	2
  1462  027C  1D03               	skipz
  1463  027D  2A8D               	goto	l4198
  1464                           
  1465                           ;MAIN.C: 395: if (timeTick % 3 == 0) {
  1466  027E  3003               	movlw	3
  1467  027F  00F2               	movwf	?___lwmod
  1468  0280  01F3               	clrf	?___lwmod+1
  1469  0281  085B               	movf	_timeTick+1,w
  1470  0282  00F5               	movwf	?___lwmod+3
  1471  0283  085A               	movf	_timeTick,w
  1472  0284  00F4               	movwf	?___lwmod+2
  1473  0285  22CD               	fcall	___lwmod
  1474  0286  0873               	movf	?___lwmod+1,w
  1475  0287  0472               	iorwf	?___lwmod,w
  1476  0288  1D03               	skipz
  1477  0289  2A8E               	goto	l6650
  1478                           
  1479                           ;MAIN.C: 397: RC0 = ~RC0;
  1480  028A  3001               	movlw	1
  1481  028B  0687               	xorwf	7,f
  1482  028C  2A8E               	goto	l6650
  1483  028D                     l4198:	
  1484  028D  1007               	bcf	7,0
  1485  028E                     l6650:	
  1486                           
  1487                           ;MAIN.C: 426: timeTick++;
  1488  028E  0ADA               	incf	_timeTick,f
  1489  028F  1903               	skipnz
  1490  0290  0ADB               	incf	_timeTick+1,f
  1491  0291  2993               	goto	l6534
  1492  0292                     __end_of_main:	
  1493                           
  1494                           	psect	swtext1
  1495  0492                     __pswtext1:	
  1496  0492                     S6688:	
  1497  0492  2A33               	ljmp	l4171
  1498  0493  29A4               	ljmp	l6544
  1499  0494  29A4               	ljmp	l6544
  1500  0495  29EB               	ljmp	l6584
  1501  0496  2A33               	ljmp	l4171
  1502  0497  2A09               	ljmp	l6600
  1503  0498  29C2               	ljmp	l6560
  1504                           
  1505                           	psect	text502
  1506  0312                     __ptext502:	
  1507 ;; =============== function _main ends ============
  1508                           
  1509                           
  1510 ;; *************** function _id_clear *****************
  1511 ;; Defined at:
  1512 ;;		line 177 in file "MAIN.C"
  1513 ;; Parameters:    Size  Location     Type
  1514 ;;  idMin           1    wreg     unsigned char 
  1515 ;;  idMax           1    4[BANK0 ] unsigned char 
  1516 ;; Auto vars:     Size  Location     Type
  1517 ;;  idMin           1   10[BANK0 ] unsigned char 
  1518 ;;  tmp             5    5[BANK0 ] unsigned char [5]
  1519 ;; Return value:  Size  Location     Type
  1520 ;;		None               void
  1521 ;; Registers used:
  1522 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1523 ;; Tracked objects:
  1524 ;;		On entry : 20/0
  1525 ;;		On exit  : 20/0
  1526 ;;		Unchanged: 0/0
  1527 ;; Data sizes:     COMMON   BANK0   BANK1
  1528 ;;      Params:         0       1       0
  1529 ;;      Locals:         0       6       0
  1530 ;;      Temps:          0       0       0
  1531 ;;      Totals:         0       7       0
  1532 ;;Total ram usage:        7 bytes
  1533 ;; Hardware stack levels used:    1
  1534 ;; Hardware stack levels required when called:    4
  1535 ;; This function calls:
  1536 ;;		_id_replate
  1537 ;; This function is called by:
  1538 ;;		_main
  1539 ;; This function uses a non-reentrant model
  1540 ;;
  1541  0312                     _id_clear:	
  1542                           
  1543                           ; Regs used in _id_clear: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1544                           ;id_clear@idMin stored from wreg
  1545  0312  00C8               	movwf	id_clear@idMin
  1546                           
  1547                           ;MAIN.C: 178: unsigned char tmp[5] = {0xff, 0xff, 0xff, 0xff, 0xff};
  1548  0313  3043               	movlw	id_clear@tmp& (0+255)
  1549  0314  0084               	movwf	4
  1550  0315  0820               	movf	id_clear@F1098,w
  1551  0316  1383               	bcf	3,7	;select IRP bank0
  1552  0317  0080               	movwf	0
  1553  0318  0A84               	incf	4,f
  1554  0319  0821               	movf	id_clear@F1098+1,w
  1555  031A  0080               	movwf	0
  1556  031B  0A84               	incf	4,f
  1557  031C  0822               	movf	id_clear@F1098+2,w
  1558  031D  0080               	movwf	0
  1559  031E  0A84               	incf	4,f
  1560  031F  0823               	movf	id_clear@F1098+3,w
  1561  0320  0080               	movwf	0
  1562  0321  0A84               	incf	4,f
  1563  0322  0824               	movf	id_clear@F1098+4,w
  1564  0323  0080               	movwf	0
  1565  0324                     l6500:	
  1566  0324  0848               	movf	id_clear@idMin,w
  1567  0325  0242               	subwf	id_clear@idMax,w
  1568  0326  1C03               	btfss	3,0
  1569  0327  0008               	return
  1570                           
  1571                           ;MAIN.C: 180: id_replate(idMin, tmp, buffTag);
  1572  0328  3043               	movlw	id_clear@tmp& (0+255)
  1573  0329  00BE               	movwf	?_id_replate
  1574  032A  3025               	movlw	_buffTag& (0+255)
  1575  032B  00BF               	movwf	?_id_replate+1
  1576  032C  0848               	movf	id_clear@idMin,w
  1577  032D  2292               	fcall	_id_replate
  1578  032E  1283               	bcf	3,5	;RP0=0, select bank0
  1579  032F  0AC8               	incf	id_clear@idMin,f
  1580  0330  2B24               	goto	l6500
  1581  0331                     __end_of_id_clear:	
  1582                           
  1583                           	psect	text503
  1584  0292                     __ptext503:	
  1585 ;; =============== function _id_clear ends ============
  1586                           
  1587                           
  1588 ;; *************** function _id_replate *****************
  1589 ;; Defined at:
  1590 ;;		line 163 in file "MAIN.C"
  1591 ;; Parameters:    Size  Location     Type
  1592 ;;  id              1    wreg     unsigned char 
  1593 ;;  Cont            1    0[BANK0 ] PTR unsigned char 
  1594 ;;		 -> id_clear@tmp(5), keyID(5), 
  1595 ;;  buff            1    1[BANK0 ] PTR unsigned char 
  1596 ;;		 -> buffTag(25), 
  1597 ;; Auto vars:     Size  Location     Type
  1598 ;;  id              1   11[COMMON] unsigned char 
  1599 ;; Return value:  Size  Location     Type
  1600 ;;		None               void
  1601 ;; Registers used:
  1602 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1603 ;; Tracked objects:
  1604 ;;		On entry : 20/0
  1605 ;;		On exit  : 0/0
  1606 ;;		Unchanged: 0/0
  1607 ;; Data sizes:     COMMON   BANK0   BANK1
  1608 ;;      Params:         0       2       0
  1609 ;;      Locals:         1       0       0
  1610 ;;      Temps:          0       2       0
  1611 ;;      Totals:         1       4       0
  1612 ;;Total ram usage:        5 bytes
  1613 ;; Hardware stack levels used:    1
  1614 ;; Hardware stack levels required when called:    3
  1615 ;; This function calls:
  1616 ;;		___bmul
  1617 ;;		_eepromWriteBlock
  1618 ;; This function is called by:
  1619 ;;		_id_clear
  1620 ;;		_main
  1621 ;; This function uses a non-reentrant model
  1622 ;;
  1623  0292                     _id_replate:	
  1624                           
  1625                           ; Regs used in _id_replate: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1626                           ;id_replate@id stored from wreg
  1627  0292  00FB               	movwf	id_replate@id
  1628                           
  1629                           ;MAIN.C: 164: id = (id - 1) * 5;
  1630  0293  3005               	movlw	5
  1631  0294  00F2               	movwf	?___bmul
  1632  0295  087B               	movf	id_replate@id,w
  1633  0296  3EFF               	addlw	255
  1634  0297  245E               	fcall	___bmul
  1635  0298  00FB               	movwf	id_replate@id
  1636                           
  1637                           ;MAIN.C: 165: {
  1638                           ;MAIN.C: 166: {
  1639                           ;MAIN.C: 167: *(buff + id) = *Cont;
  1640  0299  083E               	movf	id_replate@Cont,w
  1641  029A  0084               	movwf	4
  1642  029B  1383               	bcf	3,7	;select IRP bank0
  1643  029C  0800               	movf	0,w
  1644  029D  00C0               	movwf	??_id_replate
  1645  029E  087B               	movf	id_replate@id,w
  1646  029F  073F               	addwf	id_replate@buff,w
  1647  02A0  00C1               	movwf	??_id_replate+1
  1648  02A1  0084               	movwf	4
  1649  02A2  0840               	movf	??_id_replate,w
  1650  02A3  0080               	movwf	0
  1651                           
  1652                           ;MAIN.C: 168: *(buff + 1 + id) = *(Cont + 1);
  1653  02A4  083E               	movf	id_replate@Cont,w
  1654  02A5  3E01               	addlw	1
  1655  02A6  22C6               	fcall	PL3	;call to abstracted procedure
  1656  02A7  3E01               	addlw	1
  1657  02A8  0084               	movwf	4
  1658  02A9  0840               	movf	??_id_replate,w
  1659  02AA  0080               	movwf	0
  1660                           
  1661                           ;MAIN.C: 169: *(buff + 2 + id) = *(Cont + 2);
  1662  02AB  083E               	movf	id_replate@Cont,w
  1663  02AC  3E02               	addlw	2
  1664  02AD  22C6               	fcall	PL3	;call to abstracted procedure
  1665  02AE  3E02               	addlw	2
  1666  02AF  0084               	movwf	4
  1667  02B0  0840               	movf	??_id_replate,w
  1668  02B1  0080               	movwf	0
  1669                           
  1670                           ;MAIN.C: 170: *(buff + 3 + id) = *(Cont + 3);
  1671  02B2  083E               	movf	id_replate@Cont,w
  1672  02B3  3E03               	addlw	3
  1673  02B4  22C6               	fcall	PL3	;call to abstracted procedure
  1674  02B5  3E03               	addlw	3
  1675  02B6  0084               	movwf	4
  1676  02B7  0840               	movf	??_id_replate,w
  1677  02B8  0080               	movwf	0
  1678                           
  1679                           ;MAIN.C: 171: *(buff + 4 + id) = *(Cont + 4);
  1680  02B9  083E               	movf	id_replate@Cont,w
  1681  02BA  3E04               	addlw	4
  1682  02BB  22C6               	fcall	PL3	;call to abstracted procedure
  1683  02BC  3E04               	addlw	4
  1684  02BD  0084               	movwf	4
  1685  02BE  0840               	movf	??_id_replate,w
  1686  02BF  0080               	movwf	0
  1687                           
  1688                           ;MAIN.C: 172: }
  1689                           ;MAIN.C: 173: }
  1690                           ;MAIN.C: 175: eepromWriteBlock(0x06, buffTag, 25);
  1691  02C0  3025               	movlw	_buffTag& (0+255)
  1692  02C1  00F6               	movwf	?_eepromWriteBlock
  1693  02C2  3019               	movlw	25
  1694  02C3  00F7               	movwf	?_eepromWriteBlock+1
  1695  02C4  3006               	movlw	6
  1696  02C5  2C0D               	ljmp	_eepromWriteBlock
  1697  02C6                     __end_of_id_replate:	
  1698  02C6                     PL3:	
  1699  02C6  0084               	movwf	4
  1700  02C7  0800               	movf	0,w
  1701  02C8  00C0               	movwf	??_id_replate
  1702  02C9  087B               	movf	id_replate@id,w
  1703  02CA  073F               	addwf	id_replate@buff,w
  1704  02CB  00C1               	movwf	??_id_replate+1
  1705  02CC  0008               	return
  1706                           
  1707                           	psect	text504
  1708  03F8                     __ptext504:	
  1709 ;; =============== function _id_replate ends ============
  1710                           
  1711                           
  1712 ;; *************** function _beep2 *****************
  1713 ;; Defined at:
  1714 ;;		line 183 in file "MAIN.C"
  1715 ;; Parameters:    Size  Location     Type
  1716 ;;  sel             1    wreg     unsigned char 
  1717 ;;  rep             1    5[COMMON] unsigned char 
  1718 ;; Auto vars:     Size  Location     Type
  1719 ;;  sel             1    6[COMMON] unsigned char 
  1720 ;; Return value:  Size  Location     Type
  1721 ;;		None               void
  1722 ;; Registers used:
  1723 ;;		wreg, status,2, status,0, pclath, cstack
  1724 ;; Tracked objects:
  1725 ;;		On entry : 20/0
  1726 ;;		On exit  : 0/0
  1727 ;;		Unchanged: 0/0
  1728 ;; Data sizes:     COMMON   BANK0   BANK1
  1729 ;;      Params:         1       0       0
  1730 ;;      Locals:         1       0       0
  1731 ;;      Temps:          0       0       0
  1732 ;;      Totals:         2       0       0
  1733 ;;Total ram usage:        2 bytes
  1734 ;; Hardware stack levels used:    1
  1735 ;; Hardware stack levels required when called:    2
  1736 ;; This function calls:
  1737 ;;		_delay_x10ms
  1738 ;; This function is called by:
  1739 ;;		_main
  1740 ;; This function uses a non-reentrant model
  1741 ;;
  1742  03F8                     _beep2:	
  1743                           
  1744                           ; Regs used in _beep2: [wreg+status,2+status,0+pclath+cstack]
  1745                           ;beep2@sel stored from wreg
  1746  03F8  00F6               	movwf	beep2@sel
  1747  03F9                     l6478:	
  1748                           ;MAIN.C: 184: while (rep--) {
  1749                           
  1750  03F9  03F5               	decf	beep2@rep,f
  1751  03FA  0875               	movf	beep2@rep,w
  1752  03FB  3AFF               	xorlw	255
  1753  03FC  1903               	btfsc	3,2
  1754  03FD  0008               	return
  1755                           
  1756                           ;MAIN.C: 185: RC0 = 1; if (sel)RA3 = 1;
  1757  03FE  1283               	bcf	3,5	;RP0=0, select bank0
  1758  03FF  1407               	bsf	7,0
  1759  0400  0876               	movf	beep2@sel,w
  1760  0401  1D03               	skipz
  1761  0402  1585               	bsf	5,3
  1762                           
  1763                           ;MAIN.C: 186: delay_x10ms(20);
  1764  0403  3014               	movlw	20
  1765  0404  2430               	fcall	_delay_x10ms
  1766                           
  1767                           ;MAIN.C: 187: RC0 = 0; if (sel)RA3 = 0;
  1768  0405  1283               	bcf	3,5	;RP0=0, select bank0
  1769  0406  1007               	bcf	7,0
  1770  0407  0876               	movf	beep2@sel,w
  1771  0408  1D03               	skipz
  1772  0409  1185               	bcf	5,3
  1773                           
  1774                           ;MAIN.C: 188: delay_x10ms(20);
  1775  040A  3014               	movlw	20
  1776  040B  2430               	fcall	_delay_x10ms
  1777  040C  2BF9               	goto	l6478
  1778  040D                     __end_of_beep2:	
  1779                           
  1780                           	psect	text505
  1781  040D                     __ptext505:	
  1782 ;; =============== function _beep2 ends ============
  1783                           
  1784                           
  1785 ;; *************** function _eepromWriteBlock *****************
  1786 ;; Defined at:
  1787 ;;		line 43 in file "ms82_eeprom.c"
  1788 ;; Parameters:    Size  Location     Type
  1789 ;;  addStart        1    wreg     unsigned char 
  1790 ;;  buff            1    6[COMMON] PTR unsigned char 
  1791 ;;		 -> buffTag(25), 
  1792 ;;  len             1    7[COMMON] unsigned char 
  1793 ;; Auto vars:     Size  Location     Type
  1794 ;;  addStart        1    9[COMMON] unsigned char 
  1795 ;;  i               1   10[COMMON] unsigned char 
  1796 ;; Return value:  Size  Location     Type
  1797 ;;		None               void
  1798 ;; Registers used:
  1799 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1800 ;; Tracked objects:
  1801 ;;		On entry : 120/0
  1802 ;;		On exit  : 0/0
  1803 ;;		Unchanged: 0/0
  1804 ;; Data sizes:     COMMON   BANK0   BANK1
  1805 ;;      Params:         2       0       0
  1806 ;;      Locals:         2       0       0
  1807 ;;      Temps:          1       0       0
  1808 ;;      Totals:         5       0       0
  1809 ;;Total ram usage:        5 bytes
  1810 ;; Hardware stack levels used:    1
  1811 ;; Hardware stack levels required when called:    2
  1812 ;; This function calls:
  1813 ;;		_eepromWriteByte
  1814 ;; This function is called by:
  1815 ;;		_id_replate
  1816 ;; This function uses a non-reentrant model
  1817 ;;
  1818  040D                     _eepromWriteBlock:	
  1819                           
  1820                           ; Regs used in _eepromWriteBlock: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1821                           ;eepromWriteBlock@addStart stored from wreg
  1822  040D  00F9               	movwf	eepromWriteBlock@addStart
  1823                           
  1824                           ;ms82_eeprom.c: 44: unsigned char i;
  1825                           ;ms82_eeprom.c: 45: for(i=0;i<len;i++){
  1826  040E  01FA               	clrf	eepromWriteBlock@i
  1827  040F                     l6460:	
  1828  040F  0877               	movf	eepromWriteBlock@len,w
  1829  0410  027A               	subwf	eepromWriteBlock@i,w
  1830  0411  1803               	btfsc	3,0
  1831  0412  0008               	return
  1832                           
  1833                           ;ms82_eeprom.c: 46: eepromWriteByte(addStart+i,buff[i]);
  1834  0413  087A               	movf	eepromWriteBlock@i,w
  1835  0414  0776               	addwf	eepromWriteBlock@buff,w
  1836  0415  00F8               	movwf	??_eepromWriteBlock
  1837  0416  0084               	movwf	4
  1838  0417  1383               	bcf	3,7	;select IRP bank0
  1839  0418  0800               	movf	0,w
  1840  0419  00F2               	movwf	?_eepromWriteByte
  1841  041A  087A               	movf	eepromWriteBlock@i,w
  1842  041B  0779               	addwf	eepromWriteBlock@addStart,w
  1843  041C  22F1               	fcall	_eepromWriteByte
  1844  041D  0AFA               	incf	eepromWriteBlock@i,f
  1845  041E  2C0F               	goto	l6460
  1846  041F                     __end_of_eepromWriteBlock:	
  1847                           
  1848                           	psect	text506
  1849  03C7                     __ptext506:	
  1850 ;; =============== function _eepromWriteBlock ends ============
  1851                           
  1852                           
  1853 ;; *************** function _id_search *****************
  1854 ;; Defined at:
  1855 ;;		line 155 in file "MAIN.C"
  1856 ;; Parameters:    Size  Location     Type
  1857 ;;  id_input        1    wreg     PTR unsigned char 
  1858 ;;		 -> keyID(5), 
  1859 ;;  buff            1   10[COMMON] PTR unsigned char 
  1860 ;;		 -> buffTag(25), 
  1861 ;; Auto vars:     Size  Location     Type
  1862 ;;  id_input        1    0[BANK0 ] PTR unsigned char 
  1863 ;;		 -> keyID(5), 
  1864 ;;  i               1    1[BANK0 ] unsigned char 
  1865 ;; Return value:  Size  Location     Type
  1866 ;;                  1    wreg      unsigned char 
  1867 ;; Registers used:
  1868 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1869 ;; Tracked objects:
  1870 ;;		On entry : 20/0
  1871 ;;		On exit  : 20/0
  1872 ;;		Unchanged: FFEDF/0
  1873 ;; Data sizes:     COMMON   BANK0   BANK1
  1874 ;;      Params:         1       0       0
  1875 ;;      Locals:         0       2       0
  1876 ;;      Temps:          1       0       0
  1877 ;;      Totals:         2       2       0
  1878 ;;Total ram usage:        4 bytes
  1879 ;; Hardware stack levels used:    1
  1880 ;; Hardware stack levels required when called:    2
  1881 ;; This function calls:
  1882 ;;		_comArr
  1883 ;;		___lbdiv
  1884 ;; This function is called by:
  1885 ;;		_main
  1886 ;; This function uses a non-reentrant model
  1887 ;;
  1888  03C7                     _id_search:	
  1889                           
  1890                           ; Regs used in _id_search: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1891                           ;id_search@id_input stored from wreg
  1892  03C7  00BE               	movwf	id_search@id_input
  1893                           
  1894                           ;MAIN.C: 156: unsigned char i;
  1895                           ;MAIN.C: 157: for (i = 0; i < 21; i += 5) {
  1896  03C8  01BF               	clrf	id_search@i
  1897  03C9                     l6440:	
  1898                           
  1899                           ;MAIN.C: 158: if (comArr(id_input, buff + i, 5, 5))
  1900  03C9  083F               	movf	id_search@i,w
  1901  03CA  077A               	addwf	id_search@buff,w
  1902  03CB  00F2               	movwf	?_comArr
  1903  03CC  3005               	movlw	5
  1904  03CD  00F3               	movwf	?_comArr+1
  1905  03CE  00F4               	movwf	?_comArr+2
  1906  03CF  083E               	movf	id_search@id_input,w
  1907  03D0  236F               	fcall	_comArr
  1908  03D1  3A00               	xorlw	0
  1909                           
  1910                           ;MAIN.C: 159: return i / 5 + 1;
  1911  03D2  3005               	movlw	5
  1912  03D3  1903               	skipnz
  1913  03D4  2BDB               	goto	L1
  1914  03D5  00F2               	movwf	?___lbdiv
  1915  03D6  083F               	movf	id_search@i,w
  1916  03D7  23AC               	fcall	___lbdiv
  1917  03D8  00FB               	movwf	??_id_search
  1918  03D9  0A7B               	incf	??_id_search,w
  1919  03DA  0008               	return
  1920  03DB                     L1:	
  1921  03DB  07BF               	addwf	id_search@i,f
  1922  03DC  3015               	movlw	21
  1923  03DD  023F               	subwf	id_search@i,w
  1924  03DE  1803               	btfsc	3,0
  1925                           
  1926                           ;MAIN.C: 160: }
  1927                           ;MAIN.C: 161: return 255;
  1928  03DF  34FF               	retlw	255
  1929  03E0  2BC9               	goto	l6440
  1930  03E1                     __end_of_id_search:	
  1931                           
  1932                           	psect	text507
  1933  0430                     __ptext507:	
  1934 ;; =============== function _id_search ends ============
  1935                           
  1936                           
  1937 ;; *************** function _delay_x10ms *****************
  1938 ;; Defined at:
  1939 ;;		line 55 in file "MAIN.C"
  1940 ;; Parameters:    Size  Location     Type
  1941 ;;  t               1    wreg     unsigned char 
  1942 ;; Auto vars:     Size  Location     Type
  1943 ;;  t               1    4[COMMON] unsigned char 
  1944 ;; Return value:  Size  Location     Type
  1945 ;;		None               void
  1946 ;; Registers used:
  1947 ;;		wreg, status,2, status,0
  1948 ;; Tracked objects:
  1949 ;;		On entry : 20/0
  1950 ;;		On exit  : 0/0
  1951 ;;		Unchanged: 0/0
  1952 ;; Data sizes:     COMMON   BANK0   BANK1
  1953 ;;      Params:         0       0       0
  1954 ;;      Locals:         1       0       0
  1955 ;;      Temps:          2       0       0
  1956 ;;      Totals:         3       0       0
  1957 ;;Total ram usage:        3 bytes
  1958 ;; Hardware stack levels used:    1
  1959 ;; Hardware stack levels required when called:    1
  1960 ;; This function calls:
  1961 ;;		Nothing
  1962 ;; This function is called by:
  1963 ;;		_beep2
  1964 ;; This function uses a non-reentrant model
  1965 ;;
  1966  0430                     _delay_x10ms:	
  1967                           
  1968                           ; Regs used in _delay_x10ms: [wreg+status,2+status,0]
  1969                           ;delay_x10ms@t stored from wreg
  1970  0430  00F4               	movwf	delay_x10ms@t
  1971  0431                     l6432:	
  1972                           ;MAIN.C: 56: while (t--)
  1973                           
  1974  0431  03F4               	decf	delay_x10ms@t,f
  1975  0432  0874               	movf	delay_x10ms@t,w
  1976  0433  3AFF               	xorlw	255
  1977  0434  1903               	btfsc	3,2
  1978  0435  0008               	return
  1979                           
  1980                           ;MAIN.C: 57: _delay((unsigned long)((10)*(8000000/4000.0)));
  1981  0436  301A               	movlw	26
  1982  0437  00F3               	movwf	??_delay_x10ms+1
  1983  0438  30F8               	movlw	248
  1984  0439  00F2               	movwf	??_delay_x10ms
  1985  043A                     u1927:	
  1986  043A  0BF2               	decfsz	??_delay_x10ms,f
  1987  043B  2C3A               	goto	u1927
  1988  043C  0BF3               	decfsz	??_delay_x10ms+1,f
  1989  043D  2C3A               	goto	u1927
  1990  043E  0064               	clrwdt
  1991  043F  2C31               	goto	l6432
  1992  0440                     __end_of_delay_x10ms:	
  1993                           
  1994                           	psect	text508
  1995  000B                     __ptext508:	
  1996 ;; =============== function _delay_x10ms ends ============
  1997                           
  1998                           
  1999 ;; *************** function _get_RFID *****************
  2000 ;; Defined at:
  2001 ;;		line 20 in file "rfid125.c"
  2002 ;; Parameters:    Size  Location     Type
  2003 ;;		None
  2004 ;; Auto vars:     Size  Location     Type
  2005 ;;  RF_serial_55   11    0[BANK0 ] unsigned char [11]
  2006 ;;  timeOutVal      2   17[BANK0 ] unsigned int 
  2007 ;;  ii              1   19[BANK0 ] unsigned char 
  2008 ;;  flag_RFID_la    1   16[BANK0 ] unsigned char 
  2009 ;;  i               1   15[BANK0 ] unsigned char 
  2010 ;;  j               1   14[BANK0 ] unsigned char 
  2011 ;;  even_row        1   13[BANK0 ] unsigned char 
  2012 ;;  even_col        1   12[BANK0 ] unsigned char 
  2013 ;;  flag_RFID_sy    1   11[BANK0 ] unsigned char 
  2014 ;; Return value:  Size  Location     Type
  2015 ;;                  1    wreg      unsigned char 
  2016 ;; Registers used:
  2017 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2018 ;; Tracked objects:
  2019 ;;		On entry : 20/0
  2020 ;;		On exit  : 20/0
  2021 ;;		Unchanged: FFEDF/0
  2022 ;; Data sizes:     COMMON   BANK0   BANK1
  2023 ;;      Params:         0       0       0
  2024 ;;      Locals:         0      20       0
  2025 ;;      Temps:          1       0       0
  2026 ;;      Totals:         1      20       0
  2027 ;;Total ram usage:       21 bytes
  2028 ;; Hardware stack levels used:    1
  2029 ;; Hardware stack levels required when called:    2
  2030 ;; This function calls:
  2031 ;;		_timerOut
  2032 ;;		___lbdiv
  2033 ;; This function is called by:
  2034 ;;		_main
  2035 ;; This function uses a non-reentrant model
  2036 ;;
  2037  000B                     _get_RFID:	
  2038  000B  3010               	movlw	16
  2039                           
  2040                           ;rfid125.c: 22: unsigned char RF_serial_55bits[11];
  2041                           ;rfid125.c: 23: unsigned int timeOutVal;
  2042                           ;rfid125.c: 24: unsigned char i,ii,j;
  2043                           ;rfid125.c: 25: unsigned char flag_RFID_syn, flag_RFID_last;
  2044                           ;rfid125.c: 26: unsigned char even_row, even_col;
  2045                           ;rfid125.c: 29: flag_RFID_syn = 0;
  2046                           
  2047                           ; Regs used in _get_RFID: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2048  000C  01C9               	clrf	get_RFID@flag_RFID_syn
  2049                           
  2050                           ;rfid125.c: 32: i=16;
  2051  000D  00CD               	movwf	get_RFID@i
  2052  000E                     l6210:	
  2053                           
  2054                           ;rfid125.c: 34: {
  2055                           ;rfid125.c: 35: timeOutVal=timerOut(1,150);
  2056  000E  3096               	movlw	150
  2057  000F  00F2               	movwf	?_timerOut
  2058  0010  3001               	movlw	1
  2059  0011  01F3               	clrf	?_timerOut+1
  2060  0012  2350               	fcall	_timerOut
  2061                           
  2062                           ;rfid125.c: 36: if(timeOutVal==0) return 0;
  2063  0013  2143               	fcall	PL2	;call to abstracted procedure
  2064  0014  1903               	btfsc	3,2
  2065  0015  3400               	retlw	0
  2066                           
  2067                           ;rfid125.c: 38: timeOutVal=timerOut(0,150);
  2068  0016  3096               	movlw	150
  2069  0017  00F2               	movwf	?_timerOut
  2070  0018  3000               	movlw	0
  2071  0019  01F3               	clrf	?_timerOut+1
  2072  001A  2350               	fcall	_timerOut
  2073                           
  2074                           ;rfid125.c: 39: if(timeOutVal==0) return 0;
  2075  001B  2143               	fcall	PL2	;call to abstracted procedure
  2076  001C  1903               	btfsc	3,2
  2077  001D  3400               	retlw	0
  2078  001E  3000               	movlw	0
  2079                           
  2080                           ;rfid125.c: 41: i--;
  2081  001F  03CD               	decf	get_RFID@i,f
  2082                           
  2083                           ;rfid125.c: 42: }
  2084                           ;rfid125.c: 43: while(timeOutVal<72 && i>0);
  2085  0020  0250               	subwf	get_RFID@timeOutVal+1,w
  2086  0021  3048               	movlw	72
  2087  0022  1903               	skipnz
  2088  0023  024F               	subwf	get_RFID@timeOutVal,w
  2089  0024  1803               	skipnc
  2090  0025  2829               	goto	l2459
  2091  0026  08CD               	movf	get_RFID@i,f
  2092  0027  1D03               	skipz
  2093  0028  280E               	goto	l6210
  2094  0029                     l2459:	
  2095                           
  2096                           ;rfid125.c: 44: flag_RFID_last = 1;
  2097  0029  01CE               	clrf	get_RFID@flag_RFID_last
  2098  002A  0ACE               	incf	get_RFID@flag_RFID_last,f
  2099                           
  2100                           ;rfid125.c: 45: i = 0;
  2101  002B  01CD               	clrf	get_RFID@i
  2102  002C                     l6298:	
  2103                           ;rfid125.c: 46: while(i<64)
  2104                           
  2105  002C  3040               	movlw	64
  2106  002D  024D               	subwf	get_RFID@i,w
  2107  002E  1803               	btfsc	3,0
  2108  002F  2884               	goto	l6300
  2109                           
  2110                           ;rfid125.c: 47: {
  2111                           ;rfid125.c: 48: for(ii=0;ii<9;ii++)
  2112  0030  01D1               	clrf	get_RFID@ii
  2113  0031                     l6240:	
  2114                           
  2115                           ;rfid125.c: 49: {
  2116                           ;rfid125.c: 50: timeOutVal=timerOut(flag_RFID_last,150);
  2117  0031  2150               	fcall	PL5	;call to abstracted procedure
  2118  0032  2350               	fcall	_timerOut
  2119                           
  2120                           ;rfid125.c: 51: if(timeOutVal==0) return 0;
  2121  0033  2143               	fcall	PL2	;call to abstracted procedure
  2122  0034  1903               	btfsc	3,2
  2123  0035  3400               	retlw	0
  2124                           
  2125                           ;rfid125.c: 53: if(0==flag_RFID_last && timeOutVal<=72 ||
  2126                           ;rfid125.c: 54: 1==flag_RFID_last && timeOutVal>72)
  2127  0036  08CE               	movf	get_RFID@flag_RFID_last,f
  2128  0037  1D03               	skipz
  2129  0038  2840               	goto	l6252
  2130  0039  3000               	movlw	0
  2131  003A  0250               	subwf	get_RFID@timeOutVal+1,w
  2132  003B  3049               	movlw	73
  2133  003C  1903               	skipnz
  2134  003D  024F               	subwf	get_RFID@timeOutVal,w
  2135  003E  1C03               	skipc
  2136  003F  2849               	goto	l6256
  2137  0040                     l6252:	
  2138  0040  0B4E               	decfsz	get_RFID@flag_RFID_last,w
  2139  0041  2857               	goto	l6270
  2140  0042  3000               	movlw	0
  2141  0043  0250               	subwf	get_RFID@timeOutVal+1,w
  2142  0044  3049               	movlw	73
  2143  0045  1903               	skipnz
  2144  0046  024F               	subwf	get_RFID@timeOutVal,w
  2145  0047  1C03               	skipc
  2146  0048  2857               	goto	l6270
  2147  0049                     l6256:	
  2148                           
  2149                           ;rfid125.c: 55: {
  2150                           ;rfid125.c: 56: if(!flag_RFID_last)
  2151  0049  08CE               	movf	get_RFID@flag_RFID_last,f
  2152  004A  1D03               	skipz
  2153  004B  2854               	goto	l6266
  2154                           
  2155                           ;rfid125.c: 57: {
  2156                           ;rfid125.c: 58: timeOutVal=timerOut(1,72);
  2157  004C  3048               	movlw	72
  2158  004D  00F2               	movwf	?_timerOut
  2159  004E  3001               	movlw	1
  2160  004F  01F3               	clrf	?_timerOut+1
  2161  0050  2350               	fcall	_timerOut
  2162                           
  2163                           ;rfid125.c: 59: if(timeOutVal==0) return 0;
  2164  0051  2143               	fcall	PL2	;call to abstracted procedure
  2165  0052  1903               	btfsc	3,2
  2166  0053  3400               	retlw	0
  2167  0054                     l6266:	
  2168                           
  2169                           ;rfid125.c: 60: }
  2170                           ;rfid125.c: 61: flag_RFID_last = 0;
  2171  0054  01CE               	clrf	get_RFID@flag_RFID_last
  2172                           
  2173                           ;rfid125.c: 62: i++;
  2174  0055  0ACD               	incf	get_RFID@i,f
  2175                           
  2176                           ;rfid125.c: 63: }
  2177  0056  2879               	goto	l6290
  2178  0057                     l6270:	
  2179                           
  2180                           ;rfid125.c: 64: else
  2181                           ;rfid125.c: 65: if(0==flag_RFID_last && timeOutVal>72 ||
  2182                           ;rfid125.c: 66: 1==flag_RFID_last && timeOutVal<=72)
  2183  0057  08CE               	movf	get_RFID@flag_RFID_last,f
  2184  0058  1D03               	skipz
  2185  0059  2861               	goto	l6274
  2186  005A  3000               	movlw	0
  2187  005B  0250               	subwf	get_RFID@timeOutVal+1,w
  2188  005C  3049               	movlw	73
  2189  005D  1903               	skipnz
  2190  005E  024F               	subwf	get_RFID@timeOutVal,w
  2191  005F  1803               	skipnc
  2192  0060  286A               	goto	l6278
  2193  0061                     l6274:	
  2194  0061  0B4E               	decfsz	get_RFID@flag_RFID_last,w
  2195  0062  2879               	goto	l6290
  2196  0063  3000               	movlw	0
  2197  0064  0250               	subwf	get_RFID@timeOutVal+1,w
  2198  0065  3049               	movlw	73
  2199  0066  1903               	skipnz
  2200  0067  024F               	subwf	get_RFID@timeOutVal,w
  2201  0068  1803               	skipnc
  2202  0069  2879               	goto	l6290
  2203  006A                     l6278:	
  2204                           
  2205                           ;rfid125.c: 67: {
  2206                           ;rfid125.c: 68: if(flag_RFID_last)
  2207  006A  084E               	movf	get_RFID@flag_RFID_last,w
  2208  006B  1903               	btfsc	3,2
  2209  006C  2875               	goto	l2478
  2210                           
  2211                           ;rfid125.c: 69: {
  2212                           ;rfid125.c: 70: timeOutVal=timerOut(0,72);
  2213  006D  3048               	movlw	72
  2214  006E  00F2               	movwf	?_timerOut
  2215  006F  3000               	movlw	0
  2216  0070  01F3               	clrf	?_timerOut+1
  2217  0071  2350               	fcall	_timerOut
  2218                           
  2219                           ;rfid125.c: 71: if(timeOutVal==0) return 0;
  2220  0072  2143               	fcall	PL2	;call to abstracted procedure
  2221  0073  1903               	btfsc	3,2
  2222  0074  3400               	retlw	0
  2223  0075                     l2478:	
  2224                           
  2225                           ;rfid125.c: 72: }
  2226                           ;rfid125.c: 73: flag_RFID_last = 1;
  2227  0075  01CE               	clrf	get_RFID@flag_RFID_last
  2228  0076  0ACE               	incf	get_RFID@flag_RFID_last,f
  2229                           
  2230                           ;rfid125.c: 74: i++;
  2231  0077  0ACD               	incf	get_RFID@i,f
  2232                           
  2233                           ;rfid125.c: 76: break;
  2234  0078  287E               	goto	l6294
  2235  0079                     l6290:	
  2236  0079  3009               	movlw	9
  2237  007A  0AD1               	incf	get_RFID@ii,f
  2238  007B  0251               	subwf	get_RFID@ii,w
  2239  007C  1C03               	skipc
  2240  007D  2831               	goto	l6240
  2241  007E                     l6294:	
  2242                           
  2243                           ;rfid125.c: 77: }
  2244                           ;rfid125.c: 79: }
  2245                           ;rfid125.c: 80: if(9==ii)
  2246  007E  0851               	movf	get_RFID@ii,w
  2247  007F  3A09               	xorlw	9
  2248  0080  1D03               	skipz
  2249  0081  282C               	goto	l6298
  2250                           
  2251                           ;rfid125.c: 81: {
  2252                           ;rfid125.c: 82: flag_RFID_syn = 1;
  2253  0082  01C9               	clrf	get_RFID@flag_RFID_syn
  2254  0083  0AC9               	incf	get_RFID@flag_RFID_syn,f
  2255  0084                     l6300:	
  2256                           ;rfid125.c: 83: break;
  2257                           
  2258                           
  2259                           ;rfid125.c: 84: }
  2260                           ;rfid125.c: 85: }
  2261                           ;rfid125.c: 87: if(!flag_RFID_syn)
  2262  0084  08C9               	movf	get_RFID@flag_RFID_syn,f
  2263  0085  1903               	btfsc	3,2
  2264  0086  3400               	retlw	0
  2265                           
  2266                           ;rfid125.c: 90: }
  2267                           ;rfid125.c: 91: for(ii=0;ii<55;ii++)
  2268  0087  01D1               	clrf	get_RFID@ii
  2269  0088                     l6312:	
  2270                           
  2271                           ;rfid125.c: 92: {
  2272                           ;rfid125.c: 93: i = ii/5;
  2273  0088  3005               	movlw	5
  2274  0089  00F2               	movwf	?___lbdiv
  2275  008A  0851               	movf	get_RFID@ii,w
  2276  008B  23AC               	fcall	___lbdiv
  2277  008C  00CD               	movwf	get_RFID@i
  2278                           
  2279                           ;rfid125.c: 94: timeOutVal=timerOut(flag_RFID_last,150);
  2280  008D  2150               	fcall	PL5	;call to abstracted procedure
  2281  008E  2350               	fcall	_timerOut
  2282                           
  2283                           ;rfid125.c: 95: if(timeOutVal==0) return 0;
  2284  008F  2143               	fcall	PL2	;call to abstracted procedure
  2285  0090  1903               	btfsc	3,2
  2286  0091  3400               	retlw	0
  2287                           
  2288                           ;rfid125.c: 97: if(0==flag_RFID_last && timeOutVal<=72 ||
  2289                           ;rfid125.c: 98: 1==flag_RFID_last && timeOutVal>72)
  2290  0092  08CE               	movf	get_RFID@flag_RFID_last,f
  2291  0093  1D03               	skipz
  2292  0094  289C               	goto	l6326
  2293  0095  3000               	movlw	0
  2294  0096  0250               	subwf	get_RFID@timeOutVal+1,w
  2295  0097  3049               	movlw	73
  2296  0098  1903               	skipnz
  2297  0099  024F               	subwf	get_RFID@timeOutVal,w
  2298  009A  1C03               	skipc
  2299  009B  28A5               	goto	l6330
  2300  009C                     l6326:	
  2301  009C  0B4E               	decfsz	get_RFID@flag_RFID_last,w
  2302  009D  28B7               	goto	l6346
  2303  009E  3000               	movlw	0
  2304  009F  0250               	subwf	get_RFID@timeOutVal+1,w
  2305  00A0  3049               	movlw	73
  2306  00A1  1903               	skipnz
  2307  00A2  024F               	subwf	get_RFID@timeOutVal,w
  2308  00A3  1C03               	skipc
  2309  00A4  28B7               	goto	l6346
  2310  00A5                     l6330:	
  2311                           
  2312                           ;rfid125.c: 99: {
  2313                           ;rfid125.c: 100: if(!flag_RFID_last)
  2314  00A5  08CE               	movf	get_RFID@flag_RFID_last,f
  2315  00A6  1D03               	skipz
  2316  00A7  28B0               	goto	l6340
  2317                           
  2318                           ;rfid125.c: 101: {
  2319                           ;rfid125.c: 102: timeOutVal=timerOut(1,72);
  2320  00A8  3048               	movlw	72
  2321  00A9  00F2               	movwf	?_timerOut
  2322  00AA  3001               	movlw	1
  2323  00AB  01F3               	clrf	?_timerOut+1
  2324  00AC  2350               	fcall	_timerOut
  2325                           
  2326                           ;rfid125.c: 103: if(timeOutVal==0) return 0;
  2327  00AD  2143               	fcall	PL2	;call to abstracted procedure
  2328  00AE  1903               	btfsc	3,2
  2329  00AF  3400               	retlw	0
  2330  00B0                     l6340:	
  2331                           
  2332                           ;rfid125.c: 104: }
  2333                           ;rfid125.c: 105: flag_RFID_last = 0;
  2334  00B0  01CE               	clrf	get_RFID@flag_RFID_last
  2335                           
  2336                           ;rfid125.c: 106: RF_serial_55bits[i] <<= 1;
  2337  00B1  2149               	fcall	PL4	;call to abstracted procedure
  2338                           
  2339                           ;rfid125.c: 107: RF_serial_55bits[i] |= 0x01;
  2340  00B2  084D               	movf	get_RFID@i,w
  2341  00B3  3E3E               	addlw	get_RFID@RF_serial_55bits& (0+255)
  2342  00B4  0084               	movwf	4
  2343  00B5  1400               	bsf	0,0
  2344                           
  2345                           ;rfid125.c: 108: }
  2346  00B6  28D8               	goto	l6366
  2347  00B7                     l6346:	
  2348                           
  2349                           ;rfid125.c: 109: else
  2350                           ;rfid125.c: 110: if(0==flag_RFID_last && timeOutVal>72 ||
  2351                           ;rfid125.c: 111: 1==flag_RFID_last && timeOutVal<=72)
  2352  00B7  08CE               	movf	get_RFID@flag_RFID_last,f
  2353  00B8  1D03               	skipz
  2354  00B9  28C1               	goto	l6350
  2355  00BA  3000               	movlw	0
  2356  00BB  0250               	subwf	get_RFID@timeOutVal+1,w
  2357  00BC  3049               	movlw	73
  2358  00BD  1903               	skipnz
  2359  00BE  024F               	subwf	get_RFID@timeOutVal,w
  2360  00BF  1803               	skipnc
  2361  00C0  28CA               	goto	l6354
  2362  00C1                     l6350:	
  2363  00C1  0B4E               	decfsz	get_RFID@flag_RFID_last,w
  2364  00C2  28D8               	goto	l6366
  2365  00C3  3000               	movlw	0
  2366  00C4  0250               	subwf	get_RFID@timeOutVal+1,w
  2367  00C5  3049               	movlw	73
  2368  00C6  1903               	skipnz
  2369  00C7  024F               	subwf	get_RFID@timeOutVal,w
  2370  00C8  1803               	skipnc
  2371  00C9  28D8               	goto	l6366
  2372  00CA                     l6354:	
  2373                           
  2374                           ;rfid125.c: 112: {
  2375                           ;rfid125.c: 113: if(flag_RFID_last)
  2376  00CA  084E               	movf	get_RFID@flag_RFID_last,w
  2377  00CB  1903               	btfsc	3,2
  2378  00CC  28D5               	goto	l2499
  2379                           
  2380                           ;rfid125.c: 114: {
  2381                           ;rfid125.c: 115: timeOutVal=timerOut(0,150);
  2382  00CD  3096               	movlw	150
  2383  00CE  00F2               	movwf	?_timerOut
  2384  00CF  3000               	movlw	0
  2385  00D0  01F3               	clrf	?_timerOut+1
  2386  00D1  2350               	fcall	_timerOut
  2387                           
  2388                           ;rfid125.c: 116: if(timeOutVal==0) return 0;
  2389  00D2  2143               	fcall	PL2	;call to abstracted procedure
  2390  00D3  1903               	btfsc	3,2
  2391  00D4  3400               	retlw	0
  2392  00D5                     l2499:	
  2393                           
  2394                           ;rfid125.c: 117: }
  2395                           ;rfid125.c: 118: flag_RFID_last = 1;
  2396  00D5  01CE               	clrf	get_RFID@flag_RFID_last
  2397  00D6  0ACE               	incf	get_RFID@flag_RFID_last,f
  2398                           
  2399                           ;rfid125.c: 119: RF_serial_55bits[i] <<= 1;
  2400  00D7  2149               	fcall	PL4	;call to abstracted procedure
  2401  00D8                     l6366:	
  2402  00D8  3037               	movlw	55
  2403  00D9  0AD1               	incf	get_RFID@ii,f
  2404  00DA  0251               	subwf	get_RFID@ii,w
  2405  00DB  1C03               	skipc
  2406  00DC  2888               	goto	l6312
  2407                           
  2408                           ;rfid125.c: 120: }
  2409                           ;rfid125.c: 121: }
  2410                           ;rfid125.c: 122: if(55==ii)
  2411  00DD  0851               	movf	get_RFID@ii,w
  2412  00DE  3A37               	xorlw	55
  2413  00DF  1D03               	skipz
  2414  00E0  3400               	retlw	0
  2415                           
  2416                           ;rfid125.c: 123: {
  2417                           ;rfid125.c: 124: even_col = 0;
  2418  00E1  01CA               	clrf	get_RFID@even_col
  2419                           
  2420                           ;rfid125.c: 125: for(ii=0;ii<10;ii++)
  2421  00E2  01D1               	clrf	get_RFID@ii
  2422  00E3                     l6378:	
  2423                           
  2424                           ;rfid125.c: 126: {
  2425                           ;rfid125.c: 127: even_row = (RF_serial_55bits[ii] & 0x01);
  2426  00E3  0851               	movf	get_RFID@ii,w
  2427  00E4  3E3E               	addlw	get_RFID@RF_serial_55bits& (0+255)
  2428  00E5  0084               	movwf	4
  2429  00E6  1383               	bcf	3,7	;select IRP bank0
  2430  00E7  0800               	movf	0,w
  2431  00E8  00CB               	movwf	get_RFID@even_row
  2432  00E9  3001               	movlw	1
  2433  00EA  05CB               	andwf	get_RFID@even_row,f
  2434                           
  2435                           ;rfid125.c: 128: for(j=1;j<5;j++)
  2436  00EB  01CC               	clrf	get_RFID@j
  2437  00EC  0ACC               	incf	get_RFID@j,f
  2438  00ED                     l6388:	
  2439                           
  2440                           ;rfid125.c: 129: {
  2441                           ;rfid125.c: 130: even_row = even_row ^ ((RF_serial_55bits[ii]>>j) & 0x01);
  2442  00ED  0851               	movf	get_RFID@ii,w
  2443  00EE  3E3E               	addlw	get_RFID@RF_serial_55bits& (0+255)
  2444  00EF  0084               	movwf	4
  2445  00F0  0800               	movf	0,w
  2446  00F1  00F7               	movwf	??_get_RFID
  2447  00F2  0A4C               	incf	get_RFID@j,w
  2448  00F3  28F6               	goto	u1524
  2449  00F4                     u1525:	
  2450  00F4  1003               	clrc
  2451  00F5  0CF7               	rrf	??_get_RFID,f
  2452  00F6                     u1524:	
  2453  00F6  3EFF               	addlw	-1
  2454  00F7  1D03               	skipz
  2455  00F8  28F4               	goto	u1525
  2456  00F9  0877               	movf	??_get_RFID,w
  2457  00FA  3901               	andlw	1
  2458  00FB  06CB               	xorwf	get_RFID@even_row,f
  2459  00FC  3005               	movlw	5
  2460  00FD  0ACC               	incf	get_RFID@j,f
  2461  00FE  024C               	subwf	get_RFID@j,w
  2462  00FF  1C03               	skipc
  2463  0100  28ED               	goto	l6388
  2464                           
  2465                           ;rfid125.c: 131: }
  2466                           ;rfid125.c: 132: if(even_row & 0x01)
  2467  0101  184B               	btfsc	get_RFID@even_row,0
  2468  0102  3400               	retlw	0
  2469                           
  2470                           ;rfid125.c: 135: }
  2471                           ;rfid125.c: 137: RF_serial_55bits[ii] <<= 3;
  2472  0103  0851               	movf	get_RFID@ii,w
  2473  0104  3E3E               	addlw	get_RFID@RF_serial_55bits& (0+255)
  2474  0105  0084               	movwf	4
  2475  0106  0D80               	rlf	0,f
  2476  0107  0D80               	rlf	0,f
  2477  0108  0D00               	rlf	0,w
  2478  0109  39F8               	andlw	248
  2479  010A  0080               	movwf	0
  2480                           
  2481                           ;rfid125.c: 139: i = RF_serial_55bits[ii];
  2482  010B  0851               	movf	get_RFID@ii,w
  2483  010C  3E3E               	addlw	get_RFID@RF_serial_55bits& (0+255)
  2484  010D  0084               	movwf	4
  2485  010E  0800               	movf	0,w
  2486  010F  00CD               	movwf	get_RFID@i
  2487                           
  2488                           ;rfid125.c: 140: if( 0==ii%2 )
  2489  0110  1851               	btfsc	get_RFID@ii,0
  2490  0111  291F               	goto	l6404
  2491                           
  2492                           ;rfid125.c: 141: {
  2493                           ;rfid125.c: 142: keyID[ii/2] = (i & 0xF0);
  2494  0112  1003               	clrc
  2495  0113  0C51               	rrf	get_RFID@ii,w
  2496  0114  3E5E               	addlw	_keyID& (0+255)
  2497  0115  0084               	movwf	4
  2498  0116  084D               	movf	get_RFID@i,w
  2499  0117  0080               	movwf	0
  2500  0118  1003               	clrc
  2501  0119  0C51               	rrf	get_RFID@ii,w
  2502  011A  3E5E               	addlw	_keyID& (0+255)
  2503  011B  0084               	movwf	4
  2504  011C  30F0               	movlw	240
  2505  011D  0580               	andwf	0,f
  2506                           
  2507                           ;rfid125.c: 143: }
  2508  011E  2929               	goto	l6408
  2509  011F                     l6404:	
  2510  011F  300F               	movlw	15
  2511                           
  2512                           ;rfid125.c: 144: else
  2513                           ;rfid125.c: 145: {
  2514                           ;rfid125.c: 146: i >>=4;
  2515  0120  0ECD               	swapf	get_RFID@i,f
  2516  0121  05CD               	andwf	get_RFID@i,f
  2517                           
  2518                           ;rfid125.c: 147: keyID[ii/2] |= (i & 0x0F);
  2519  0122  1003               	clrc
  2520  0123  0C51               	rrf	get_RFID@ii,w
  2521  0124  3E5E               	addlw	_keyID& (0+255)
  2522  0125  0084               	movwf	4
  2523  0126  084D               	movf	get_RFID@i,w
  2524  0127  390F               	andlw	15
  2525  0128  0480               	iorwf	0,f
  2526  0129                     l6408:	
  2527                           
  2528                           ;rfid125.c: 148: }
  2529                           ;rfid125.c: 149: even_col ^= RF_serial_55bits[ii];
  2530  0129  0851               	movf	get_RFID@ii,w
  2531  012A  3E3E               	addlw	get_RFID@RF_serial_55bits& (0+255)
  2532  012B  0084               	movwf	4
  2533  012C  0800               	movf	0,w
  2534  012D  06CA               	xorwf	get_RFID@even_col,f
  2535  012E  300A               	movlw	10
  2536  012F  0AD1               	incf	get_RFID@ii,f
  2537  0130  0251               	subwf	get_RFID@ii,w
  2538  0131  1C03               	skipc
  2539  0132  28E3               	goto	l6378
  2540                           
  2541                           ;rfid125.c: 150: }
  2542                           ;rfid125.c: 151: RF_serial_55bits[10] <<= 3;
  2543  0133  0DC8               	rlf	get_RFID@RF_serial_55bits+10,f
  2544  0134  0DC8               	rlf	get_RFID@RF_serial_55bits+10,f
  2545  0135  0D48               	rlf	get_RFID@RF_serial_55bits+10,w
  2546  0136  39F8               	andlw	248
  2547  0137  00C8               	movwf	get_RFID@RF_serial_55bits+10
  2548  0138  30F0               	movlw	240
  2549                           
  2550                           ;rfid125.c: 152: keyID[0] =0x00;
  2551  0139  01DE               	clrf	_keyID
  2552                           
  2553                           ;rfid125.c: 153: if(((RF_serial_55bits[10] & 0xf0)==(even_col & 0xf0)) && (0==(RF_serial
      +                          _55bits[10]&0x08)))
  2554  013A  054A               	andwf	get_RFID@even_col,w
  2555  013B  00F7               	movwf	??_get_RFID
  2556  013C  0848               	movf	get_RFID@RF_serial_55bits+10,w
  2557  013D  39F0               	andlw	240
  2558  013E  0677               	xorwf	??_get_RFID,w
  2559  013F  1903               	btfsc	3,2
  2560  0140  19C8               	btfsc	get_RFID@RF_serial_55bits+10,3
  2561  0141  3400               	retlw	0
  2562                           
  2563                           ;rfid125.c: 154: {
  2564                           ;rfid125.c: 156: return 1;
  2565  0142  3401               	retlw	1
  2566  0143                     __end_of_get_RFID:	
  2567  0143                     PL2:	
  2568  0143  0873               	movf	?_timerOut+1,w
  2569  0144  00D0               	movwf	get_RFID@timeOutVal+1
  2570  0145  0872               	movf	?_timerOut,w
  2571  0146  00CF               	movwf	get_RFID@timeOutVal
  2572  0147  0450               	iorwf	get_RFID@timeOutVal+1,w
  2573  0148  0008               	return
  2574  0149                     PL4:	
  2575  0149  084D               	movf	get_RFID@i,w
  2576  014A  3E3E               	addlw	get_RFID@RF_serial_55bits& (0+255)
  2577  014B  0084               	movwf	4
  2578  014C  1383               	bcf	3,7	;select IRP bank0
  2579  014D  1003               	clrc
  2580  014E  0D80               	rlf	0,f
  2581  014F  0008               	return
  2582  0150                     PL5:	
  2583  0150  3096               	movlw	150
  2584  0151  00F2               	movwf	?_timerOut
  2585  0152  01F3               	clrf	?_timerOut+1
  2586  0153  084E               	movf	get_RFID@flag_RFID_last,w
  2587  0154  0008               	return
  2588                           
  2589                           	psect	text509
  2590  02F1                     __ptext509:	
  2591 ;; =============== function _get_RFID ends ============
  2592                           
  2593                           
  2594 ;; *************** function _eepromWriteByte *****************
  2595 ;; Defined at:
  2596 ;;		line 26 in file "ms82_eeprom.c"
  2597 ;; Parameters:    Size  Location     Type
  2598 ;;  EEAddr          1    wreg     unsigned char 
  2599 ;;  EEData          1    2[COMMON] unsigned char 
  2600 ;; Auto vars:     Size  Location     Type
  2601 ;;  EEAddr          1    5[COMMON] unsigned char 
  2602 ;; Return value:  Size  Location     Type
  2603 ;;		None               void
  2604 ;; Registers used:
  2605 ;;		wreg
  2606 ;; Tracked objects:
  2607 ;;		On entry : 0/20
  2608 ;;		On exit  : 0/0
  2609 ;;		Unchanged: 0/0
  2610 ;; Data sizes:     COMMON   BANK0   BANK1
  2611 ;;      Params:         1       0       0
  2612 ;;      Locals:         1       0       0
  2613 ;;      Temps:          2       0       0
  2614 ;;      Totals:         4       0       0
  2615 ;;Total ram usage:        4 bytes
  2616 ;; Hardware stack levels used:    1
  2617 ;; Hardware stack levels required when called:    1
  2618 ;; This function calls:
  2619 ;;		Nothing
  2620 ;; This function is called by:
  2621 ;;		_eepromWriteBlock
  2622 ;;		_main
  2623 ;; This function uses a non-reentrant model
  2624 ;;
  2625  02F1                     _eepromWriteByte:	
  2626                           
  2627                           ; Regs used in _eepromWriteByte: [wreg]
  2628                           ;eepromWriteByte@EEAddr stored from wreg
  2629  02F1  00F5               	movwf	eepromWriteByte@EEAddr
  2630                           
  2631                           ;ms82_eeprom.c: 27: GIE = 0;
  2632  02F2  138B               	bcf	11,7
  2633  02F3                     l1597:	
  2634                           ;ms82_eeprom.c: 29: {
  2635                           ;ms82_eeprom.c: 30: while(GIE) asm("clrwdt");
  2636                           
  2637  02F3  1F8B               	btfss	11,7
  2638  02F4  2AF7               	goto	l6196
  2639  02F5  0064               	clrwdt	;#
  2640  02F6  2AF3               	goto	l1597
  2641  02F7                     l6196:	
  2642                           
  2643                           ;ms82_eeprom.c: 31: EEADR = EEAddr;
  2644  02F7  0875               	movf	eepromWriteByte@EEAddr,w
  2645  02F8  1683               	bsf	3,5	;RP0=1, select bank1
  2646  02F9  009B               	movwf	27	;volatile
  2647                           
  2648                           ;ms82_eeprom.c: 32: EEDAT = EEData;
  2649  02FA  0872               	movf	eepromWriteByte@EEData,w
  2650  02FB  009A               	movwf	26	;volatile
  2651  02FC  3034               	movlw	52
  2652                           
  2653                           ;ms82_eeprom.c: 33: EEIF = 0;
  2654  02FD  1283               	bcf	3,5	;RP0=0, select bank0
  2655  02FE  138C               	bcf	12,7
  2656                           
  2657                           ;ms82_eeprom.c: 34: EECON1 = 0x34;
  2658  02FF  1683               	bsf	3,5	;RP0=1, select bank1
  2659  0300  009C               	movwf	28	;volatile
  2660                           
  2661                           ;ms82_eeprom.c: 35: WR = 1;
  2662  0301  141D               	bsf	29,0
  2663  0302                     l1600:	
  2664                           ;ms82_eeprom.c: 36: while(WR) asm("clrwdt");
  2665                           
  2666  0302  1683               	bsf	3,5	;RP0=1, select bank1
  2667  0303  1C1D               	btfss	29,0
  2668  0304  2B07               	goto	l6202
  2669  0305  0064               	clrwdt	;#
  2670  0306  2B02               	goto	l1600
  2671  0307                     l6202:	
  2672                           
  2673                           ;ms82_eeprom.c: 37: _delay((unsigned long)((2)*(8000000/4000.0)));
  2674  0307  3006               	movlw	6
  2675  0308  00F4               	movwf	??_eepromWriteByte+1
  2676  0309  3030               	movlw	48
  2677  030A  00F3               	movwf	??_eepromWriteByte
  2678  030B                     u1937:	
  2679  030B  0BF3               	decfsz	??_eepromWriteByte,f
  2680  030C  2B0B               	goto	u1937
  2681  030D  0BF4               	decfsz	??_eepromWriteByte+1,f
  2682  030E  2B0B               	goto	u1937
  2683  030F  0064               	clrwdt
  2684                           
  2685                           ;ms82_eeprom.c: 38: }
  2686                           ;ms82_eeprom.c: 39: GIE = 1;
  2687  0310  178B               	bsf	11,7
  2688  0311  0008               	return
  2689  0312                     __end_of_eepromWriteByte:	
  2690                           
  2691                           	psect	text510
  2692  041F                     __ptext510:	
  2693 ;; =============== function _eepromWriteByte ends ============
  2694                           
  2695                           
  2696 ;; *************** function _eepromReadBlock *****************
  2697 ;; Defined at:
  2698 ;;		line 18 in file "ms82_eeprom.c"
  2699 ;; Parameters:    Size  Location     Type
  2700 ;;  addStart        1    wreg     unsigned char 
  2701 ;;  buff            1    4[COMMON] PTR unsigned char 
  2702 ;;		 -> buffTag(25), 
  2703 ;;  len             1    5[COMMON] unsigned char 
  2704 ;; Auto vars:     Size  Location     Type
  2705 ;;  addStart        1    7[COMMON] unsigned char 
  2706 ;;  i               1    8[COMMON] unsigned char 
  2707 ;; Return value:  Size  Location     Type
  2708 ;;		None               void
  2709 ;; Registers used:
  2710 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2711 ;; Tracked objects:
  2712 ;;		On entry : 0/20
  2713 ;;		On exit  : 0/0
  2714 ;;		Unchanged: FFEDF/0
  2715 ;; Data sizes:     COMMON   BANK0   BANK1
  2716 ;;      Params:         2       0       0
  2717 ;;      Locals:         2       0       0
  2718 ;;      Temps:          1       0       0
  2719 ;;      Totals:         5       0       0
  2720 ;;Total ram usage:        5 bytes
  2721 ;; Hardware stack levels used:    1
  2722 ;; Hardware stack levels required when called:    2
  2723 ;; This function calls:
  2724 ;;		_eepromReadByte
  2725 ;; This function is called by:
  2726 ;;		_main
  2727 ;; This function uses a non-reentrant model
  2728 ;;
  2729  041F                     _eepromReadBlock:	
  2730                           
  2731                           ; Regs used in _eepromReadBlock: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2732                           ;eepromReadBlock@addStart stored from wreg
  2733  041F  00F7               	movwf	eepromReadBlock@addStart
  2734                           
  2735                           ;ms82_eeprom.c: 19: unsigned char i;
  2736                           ;ms82_eeprom.c: 20: for(i=0;i<len;i++){
  2737  0420  01F8               	clrf	eepromReadBlock@i
  2738  0421                     l6192:	
  2739  0421  0875               	movf	eepromReadBlock@len,w
  2740  0422  0278               	subwf	eepromReadBlock@i,w
  2741  0423  1803               	btfsc	3,0
  2742  0424  0008               	return
  2743                           
  2744                           ;ms82_eeprom.c: 21: buff[i] = eepromReadByte(addStart+i);
  2745  0425  0878               	movf	eepromReadBlock@i,w
  2746  0426  0774               	addwf	eepromReadBlock@buff,w
  2747  0427  00F6               	movwf	??_eepromReadBlock
  2748  0428  0084               	movwf	4
  2749  0429  0878               	movf	eepromReadBlock@i,w
  2750  042A  0777               	addwf	eepromReadBlock@addStart,w
  2751  042B  248A               	fcall	_eepromReadByte
  2752  042C  1383               	bcf	3,7	;select IRP bank0
  2753  042D  0080               	movwf	0
  2754  042E  0AF8               	incf	eepromReadBlock@i,f
  2755  042F  2C21               	goto	l6192
  2756  0430                     __end_of_eepromReadBlock:	
  2757                           
  2758                           	psect	text511
  2759  0482                     __ptext511:	
  2760 ;; =============== function _eepromReadBlock ends ============
  2761                           
  2762                           
  2763 ;; *************** function _sys_init *****************
  2764 ;; Defined at:
  2765 ;;		line 3 in file "sysinit.c"
  2766 ;; Parameters:    Size  Location     Type
  2767 ;;		None
  2768 ;; Auto vars:     Size  Location     Type
  2769 ;;		None
  2770 ;; Return value:  Size  Location     Type
  2771 ;;		None               void
  2772 ;; Registers used:
  2773 ;;		wreg
  2774 ;; Tracked objects:
  2775 ;;		On entry : 0/0
  2776 ;;		On exit  : 20/20
  2777 ;;		Unchanged: 0/0
  2778 ;; Data sizes:     COMMON   BANK0   BANK1
  2779 ;;      Params:         0       0       0
  2780 ;;      Locals:         0       0       0
  2781 ;;      Temps:          0       0       0
  2782 ;;      Totals:         0       0       0
  2783 ;;Total ram usage:        0 bytes
  2784 ;; Hardware stack levels used:    1
  2785 ;; Hardware stack levels required when called:    1
  2786 ;; This function calls:
  2787 ;;		Nothing
  2788 ;; This function is called by:
  2789 ;;		_main
  2790 ;; This function uses a non-reentrant model
  2791 ;;
  2792  0482                     _sys_init:	
  2793                           
  2794                           ;sysinit.c: 21: OSCCON = 0B01100001;
  2795                           
  2796                           ; Regs used in _sys_init: [wreg]
  2797  0482  3061               	movlw	97
  2798  0483  1683               	bsf	3,5	;RP0=1, select bank1
  2799  0484  008F               	movwf	15	;volatile
  2800                           
  2801                           ;sysinit.c: 22: _nop();
  2802  0485  0000               	nop
  2803  0486                     l787:	
  2804                           ;sysinit.c: 28: while(HTS==0);
  2805                           
  2806  0486  1683               	bsf	3,5	;RP0=1, select bank1
  2807  0487  190F               	btfsc	15,2
  2808  0488  0008               	return
  2809  0489  2C86               	goto	l787
  2810  048A                     __end_of_sys_init:	
  2811                           
  2812                           	psect	text512
  2813  03AC                     __ptext512:	
  2814 ;; =============== function _sys_init ends ============
  2815                           
  2816                           
  2817 ;; *************** function ___lbdiv *****************
  2818 ;; Defined at:
  2819 ;;		line 5 in file "D:\OneDrive\SmarRF\MCU\MC82\IDE\ORIGINIDE_V2.0.9\Program Files (x86)\HI-TECH Software\PICC\9.83\sour
      +ces\lbdiv.c"
  2820 ;; Parameters:    Size  Location     Type
  2821 ;;  dividend        1    wreg     unsigned char 
  2822 ;;  divisor         1    2[COMMON] unsigned char 
  2823 ;; Auto vars:     Size  Location     Type
  2824 ;;  dividend        1    3[COMMON] unsigned char 
  2825 ;;  quotient        1    5[COMMON] unsigned char 
  2826 ;;  counter         1    4[COMMON] unsigned char 
  2827 ;; Return value:  Size  Location     Type
  2828 ;;                  1    wreg      unsigned char 
  2829 ;; Registers used:
  2830 ;;		wreg, status,2, status,0
  2831 ;; Tracked objects:
  2832 ;;		On entry : 20/0
  2833 ;;		On exit  : 20/0
  2834 ;;		Unchanged: FFFDF/0
  2835 ;; Data sizes:     COMMON   BANK0   BANK1
  2836 ;;      Params:         1       0       0
  2837 ;;      Locals:         3       0       0
  2838 ;;      Temps:          0       0       0
  2839 ;;      Totals:         4       0       0
  2840 ;;Total ram usage:        4 bytes
  2841 ;; Hardware stack levels used:    1
  2842 ;; Hardware stack levels required when called:    1
  2843 ;; This function calls:
  2844 ;;		Nothing
  2845 ;; This function is called by:
  2846 ;;		_get_RFID
  2847 ;;		_id_search
  2848 ;; This function uses a non-reentrant model
  2849 ;;
  2850  03AC                     ___lbdiv:	
  2851                           
  2852                           ; Regs used in ___lbdiv: [wreg+status,2+status,0]
  2853                           ;___lbdiv@dividend stored from wreg
  2854  03AC  00F3               	movwf	___lbdiv@dividend
  2855  03AD  01F5               	clrf	___lbdiv@quotient
  2856  03AE  0872               	movf	___lbdiv@divisor,w
  2857  03AF  1903               	btfsc	3,2
  2858  03B0  2BC5               	goto	l6178
  2859  03B1  01F4               	clrf	___lbdiv@counter
  2860  03B2                     l6164:	
  2861  03B2  0AF4               	incf	___lbdiv@counter,f
  2862  03B3  1BF2               	btfsc	___lbdiv@divisor,7
  2863  03B4  2BB8               	goto	l4902
  2864  03B5  1003               	clrc
  2865  03B6  0DF2               	rlf	___lbdiv@divisor,f
  2866  03B7  2BB2               	goto	l6164
  2867  03B8                     l4902:	
  2868  03B8  1003               	clrc
  2869  03B9  0DF5               	rlf	___lbdiv@quotient,f
  2870  03BA  0872               	movf	___lbdiv@divisor,w
  2871  03BB  0273               	subwf	___lbdiv@dividend,w
  2872  03BC  1C03               	skipc
  2873  03BD  2BC2               	goto	L2
  2874  03BE  0872               	movf	___lbdiv@divisor,w
  2875  03BF  02F3               	subwf	___lbdiv@dividend,f
  2876  03C0  1475               	bsf	___lbdiv@quotient,0
  2877  03C1  1003               	clrc
  2878  03C2                     L2:	
  2879  03C2  0CF2               	rrf	___lbdiv@divisor,f
  2880  03C3  0BF4               	decfsz	___lbdiv@counter,f
  2881  03C4  2BB8               	goto	l4902
  2882  03C5                     l6178:	
  2883  03C5  0875               	movf	___lbdiv@quotient,w
  2884  03C6  0008               	return
  2885  03C7                     __end_of___lbdiv:	
  2886                           
  2887                           	psect	text513
  2888  02CD                     __ptext513:	
  2889 ;; =============== function ___lbdiv ends ============
  2890                           
  2891                           
  2892 ;; *************** function ___lwmod *****************
  2893 ;; Defined at:
  2894 ;;		line 5 in file "D:\OneDrive\SmarRF\MCU\MC82\IDE\ORIGINIDE_V2.0.9\Program Files (x86)\HI-TECH Software\PICC\9.83\sour
      +ces\lwmod.c"
  2895 ;; Parameters:    Size  Location     Type
  2896 ;;  divisor         2    2[COMMON] unsigned int 
  2897 ;;  dividend        2    4[COMMON] unsigned int 
  2898 ;; Auto vars:     Size  Location     Type
  2899 ;;  counter         1    6[COMMON] unsigned char 
  2900 ;; Return value:  Size  Location     Type
  2901 ;;                  2    2[COMMON] unsigned int 
  2902 ;; Registers used:
  2903 ;;		wreg, status,2, status,0
  2904 ;; Tracked objects:
  2905 ;;		On entry : 20/0
  2906 ;;		On exit  : 20/0
  2907 ;;		Unchanged: FFFDF/0
  2908 ;; Data sizes:     COMMON   BANK0   BANK1
  2909 ;;      Params:         4       0       0
  2910 ;;      Locals:         1       0       0
  2911 ;;      Temps:          0       0       0
  2912 ;;      Totals:         5       0       0
  2913 ;;Total ram usage:        5 bytes
  2914 ;; Hardware stack levels used:    1
  2915 ;; Hardware stack levels required when called:    1
  2916 ;; This function calls:
  2917 ;;		Nothing
  2918 ;; This function is called by:
  2919 ;;		_main
  2920 ;; This function uses a non-reentrant model
  2921 ;;
  2922  02CD                     ___lwmod:	
  2923                           
  2924                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  2925  02CD  0873               	movf	___lwmod@divisor+1,w
  2926  02CE  0472               	iorwf	___lwmod@divisor,w
  2927  02CF  1903               	skipnz
  2928  02D0  2AEC               	goto	l6154
  2929  02D1  01F6               	clrf	___lwmod@counter
  2930  02D2                     L3:	
  2931  02D2  0AF6               	incf	___lwmod@counter,f
  2932  02D3  1BF3               	btfsc	___lwmod@divisor+1,7
  2933  02D4  2AD9               	goto	l6146
  2934  02D5  1003               	clrc
  2935  02D6  0DF2               	rlf	___lwmod@divisor,f
  2936  02D7  0DF3               	rlf	___lwmod@divisor+1,f
  2937  02D8  2AD2               	goto	L3
  2938  02D9                     l6146:	
  2939  02D9  0873               	movf	___lwmod@divisor+1,w
  2940  02DA  0275               	subwf	___lwmod@dividend+1,w
  2941  02DB  1D03               	skipz
  2942  02DC  2ADF               	goto	u1065
  2943  02DD  0872               	movf	___lwmod@divisor,w
  2944  02DE  0274               	subwf	___lwmod@dividend,w
  2945  02DF                     u1065:	
  2946  02DF  1C03               	skipc
  2947  02E0  2AE8               	goto	L4
  2948  02E1  0872               	movf	___lwmod@divisor,w
  2949  02E2  02F4               	subwf	___lwmod@dividend,f
  2950  02E3  0873               	movf	___lwmod@divisor+1,w
  2951  02E4  1C03               	skipc
  2952  02E5  03F5               	decf	___lwmod@dividend+1,f
  2953  02E6  02F5               	subwf	___lwmod@dividend+1,f
  2954  02E7  1003               	clrc
  2955  02E8                     L4:	
  2956  02E8  0CF3               	rrf	___lwmod@divisor+1,f
  2957  02E9  0CF2               	rrf	___lwmod@divisor,f
  2958  02EA  0BF6               	decfsz	___lwmod@counter,f
  2959  02EB  2AD9               	goto	l6146
  2960  02EC                     l6154:	
  2961  02EC  0875               	movf	___lwmod@dividend+1,w
  2962  02ED  00F3               	movwf	?___lwmod+1
  2963  02EE  0874               	movf	___lwmod@dividend,w
  2964  02EF  00F2               	movwf	?___lwmod
  2965  02F0  0008               	return
  2966  02F1                     __end_of___lwmod:	
  2967                           
  2968                           	psect	text514
  2969  045E                     __ptext514:	
  2970 ;; =============== function ___lwmod ends ============
  2971                           
  2972                           
  2973 ;; *************** function ___bmul *****************
  2974 ;; Defined at:
  2975 ;;		line 3 in file "D:\OneDrive\SmarRF\MCU\MC82\IDE\ORIGINIDE_V2.0.9\Program Files (x86)\HI-TECH Software\PICC\9.83\sour
      +ces\bmul.c"
  2976 ;; Parameters:    Size  Location     Type
  2977 ;;  multiplier      1    wreg     unsigned char 
  2978 ;;  multiplicand    1    2[COMMON] unsigned char 
  2979 ;; Auto vars:     Size  Location     Type
  2980 ;;  multiplier      1    4[COMMON] unsigned char 
  2981 ;;  product         1    3[COMMON] unsigned char 
  2982 ;; Return value:  Size  Location     Type
  2983 ;;                  1    wreg      unsigned char 
  2984 ;; Registers used:
  2985 ;;		wreg, status,2, status,0
  2986 ;; Tracked objects:
  2987 ;;		On entry : 20/0
  2988 ;;		On exit  : 20/0
  2989 ;;		Unchanged: FFFDF/0
  2990 ;; Data sizes:     COMMON   BANK0   BANK1
  2991 ;;      Params:         1       0       0
  2992 ;;      Locals:         2       0       0
  2993 ;;      Temps:          0       0       0
  2994 ;;      Totals:         3       0       0
  2995 ;;Total ram usage:        3 bytes
  2996 ;; Hardware stack levels used:    1
  2997 ;; Hardware stack levels required when called:    1
  2998 ;; This function calls:
  2999 ;;		Nothing
  3000 ;; This function is called by:
  3001 ;;		_id_replate
  3002 ;; This function uses a non-reentrant model
  3003 ;;
  3004  045E                     ___bmul:	
  3005                           
  3006                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  3007                           ;___bmul@multiplier stored from wreg
  3008  045E  00F4               	movwf	___bmul@multiplier
  3009  045F  01F3               	clrf	___bmul@product
  3010  0460                     l6124:	
  3011  0460  0872               	movf	___bmul@multiplicand,w
  3012  0461  1874               	btfsc	___bmul@multiplier,0
  3013  0462  07F3               	addwf	___bmul@product,f
  3014  0463  1003               	clrc
  3015  0464  0DF2               	rlf	___bmul@multiplicand,f
  3016  0465  1003               	clrc
  3017  0466  0CF4               	rrf	___bmul@multiplier,f
  3018  0467  08F4               	movf	___bmul@multiplier,f
  3019  0468  1D03               	skipz
  3020  0469  2C60               	goto	l6124
  3021  046A  0873               	movf	___bmul@product,w
  3022  046B  0008               	return
  3023  046C                     __end_of___bmul:	
  3024                           
  3025                           	psect	text515
  3026  0478                     __ptext515:	
  3027 ;; =============== function ___bmul ends ============
  3028                           
  3029                           
  3030 ;; *************** function _setState *****************
  3031 ;; Defined at:
  3032 ;;		line 148 in file "MAIN.C"
  3033 ;; Parameters:    Size  Location     Type
  3034 ;;  stt             1    wreg     unsigned char 
  3035 ;;  _tOut           2    2[COMMON] unsigned int 
  3036 ;; Auto vars:     Size  Location     Type
  3037 ;;  stt             1    4[COMMON] unsigned char 
  3038 ;; Return value:  Size  Location     Type
  3039 ;;		None               void
  3040 ;; Registers used:
  3041 ;;		wreg, status,2
  3042 ;; Tracked objects:
  3043 ;;		On entry : 0/20
  3044 ;;		On exit  : 20/0
  3045 ;;		Unchanged: FFFDF/0
  3046 ;; Data sizes:     COMMON   BANK0   BANK1
  3047 ;;      Params:         2       0       0
  3048 ;;      Locals:         1       0       0
  3049 ;;      Temps:          0       0       0
  3050 ;;      Totals:         3       0       0
  3051 ;;Total ram usage:        3 bytes
  3052 ;; Hardware stack levels used:    1
  3053 ;; Hardware stack levels required when called:    1
  3054 ;; This function calls:
  3055 ;;		Nothing
  3056 ;; This function is called by:
  3057 ;;		_main
  3058 ;; This function uses a non-reentrant model
  3059 ;;
  3060  0478                     _setState:	
  3061                           
  3062                           ; Regs used in _setState: [wreg+status,2]
  3063                           ;setState@stt stored from wreg
  3064  0478  00F4               	movwf	setState@stt
  3065                           
  3066                           ;MAIN.C: 150: mtState = stt;
  3067  0479  1283               	bcf	3,5	;RP0=0, select bank0
  3068  047A  00DD               	movwf	_mtState
  3069                           
  3070                           ;MAIN.C: 151: timeTick = 0;
  3071  047B  01DA               	clrf	_timeTick
  3072  047C  01DB               	clrf	_timeTick+1
  3073                           
  3074                           ;MAIN.C: 152: timeOut = _tOut;
  3075  047D  0873               	movf	setState@_tOut+1,w
  3076  047E  00D9               	movwf	_timeOut+1
  3077  047F  0872               	movf	setState@_tOut,w
  3078  0480  00D8               	movwf	_timeOut
  3079  0481  0008               	return
  3080  0482                     __end_of_setState:	
  3081                           
  3082                           	psect	text516
  3083  0331                     __ptext516:	
  3084 ;; =============== function _setState ends ============
  3085                           
  3086                           
  3087 ;; *************** function _SET_EPWM_ON *****************
  3088 ;; Defined at:
  3089 ;;		line 11 in file "ms82_pwm.c"
  3090 ;; Parameters:    Size  Location     Type
  3091 ;;		None
  3092 ;; Auto vars:     Size  Location     Type
  3093 ;;		None
  3094 ;; Return value:  Size  Location     Type
  3095 ;;		None               void
  3096 ;; Registers used:
  3097 ;;		wreg, status,2
  3098 ;; Tracked objects:
  3099 ;;		On entry : 20/20
  3100 ;;		On exit  : 20/20
  3101 ;;		Unchanged: FFE00/0
  3102 ;; Data sizes:     COMMON   BANK0   BANK1
  3103 ;;      Params:         0       0       0
  3104 ;;      Locals:         0       0       0
  3105 ;;      Temps:          0       0       0
  3106 ;;      Totals:         0       0       0
  3107 ;;Total ram usage:        0 bytes
  3108 ;; Hardware stack levels used:    1
  3109 ;; Hardware stack levels required when called:    1
  3110 ;; This function calls:
  3111 ;;		Nothing
  3112 ;; This function is called by:
  3113 ;;		_main
  3114 ;; This function uses a non-reentrant model
  3115 ;;
  3116  0331                     _SET_EPWM_ON:	
  3117                           
  3118                           ;ms82_pwm.c: 12: TRISC |= 0B00100000;
  3119                           
  3120                           ; Regs used in _SET_EPWM_ON: [wreg+status,2]
  3121  0331  1687               	bsf	7,5	;volatile
  3122                           
  3123                           ;ms82_pwm.c: 13: T2CON0 = 0B00000001;
  3124  0332  3001               	movlw	1
  3125  0333  1283               	bcf	3,5	;RP0=0, select bank0
  3126  0334  0092               	movwf	18	;volatile
  3127                           
  3128                           ;ms82_pwm.c: 14: T2CON1 = 0B00000000;
  3129  0335  1683               	bsf	3,5	;RP0=1, select bank1
  3130  0336  019E               	clrf	30	;volatile
  3131                           
  3132                           ;ms82_pwm.c: 15: PR2H = 0;
  3133  0337  0192               	clrf	18	;volatile
  3134                           
  3135                           ;ms82_pwm.c: 16: PR2L = 7;
  3136  0338  3007               	movlw	7
  3137  0339  0091               	movwf	17	;volatile
  3138                           
  3139                           ;ms82_pwm.c: 17: P1ADTH = 0;
  3140  033A  1283               	bcf	3,5	;RP0=0, select bank0
  3141  033B  0194               	clrf	20	;volatile
  3142                           
  3143                           ;ms82_pwm.c: 18: P1ADTL = 4;
  3144  033C  3004               	movlw	4
  3145  033D  008E               	movwf	14	;volatile
  3146                           
  3147                           ;ms82_pwm.c: 20: P1OE = 0B00000001;
  3148  033E  3001               	movlw	1
  3149  033F  1683               	bsf	3,5	;RP0=1, select bank1
  3150  0340  0090               	movwf	16	;volatile
  3151                           
  3152                           ;ms82_pwm.c: 21: P1POL = 0B00000000;
  3153  0341  0199               	clrf	25	;volatile
  3154                           
  3155                           ;ms82_pwm.c: 22: P1CON = 0B00000000;
  3156  0342  1283               	bcf	3,5	;RP0=0, select bank0
  3157  0343  0196               	clrf	22	;volatile
  3158                           
  3159                           ;ms82_pwm.c: 24: TMR2H = 0;
  3160  0344  0193               	clrf	19	;volatile
  3161                           
  3162                           ;ms82_pwm.c: 25: TMR2L = 0;
  3163  0345  0191               	clrf	17	;volatile
  3164                           
  3165                           ;ms82_pwm.c: 26: TMR2IF = 0;
  3166  0346  108C               	bcf	12,1
  3167                           
  3168                           ;ms82_pwm.c: 27: TMR2ON = 1;
  3169  0347  1512               	bsf	18,2
  3170  0348                     l3294:	
  3171                           ;ms82_pwm.c: 28: while(TMR2IF==0) asm("clrwdt");
  3172                           
  3173  0348  1283               	bcf	3,5	;RP0=0, select bank0
  3174  0349  188C               	btfsc	12,1
  3175  034A  2B4D               	goto	l3296
  3176  034B  0064               	clrwdt	;#
  3177  034C  2B48               	goto	l3294
  3178  034D                     l3296:	
  3179                           
  3180                           ;ms82_pwm.c: 29: TRISC &= 0B11011111;
  3181  034D  1683               	bsf	3,5	;RP0=1, select bank1
  3182  034E  1287               	bcf	7,5	;volatile
  3183  034F  0008               	return
  3184  0350                     __end_of_SET_EPWM_ON:	
  3185                           
  3186                           	psect	text517
  3187  0350                     __ptext517:	
  3188 ;; =============== function _SET_EPWM_ON ends ============
  3189                           
  3190                           
  3191 ;; *************** function _timerOut *****************
  3192 ;; Defined at:
  3193 ;;		line 6 in file "rfid125.c"
  3194 ;; Parameters:    Size  Location     Type
  3195 ;;  Logic           1    wreg     unsigned char 
  3196 ;;  time            2    2[COMMON] unsigned int 
  3197 ;; Auto vars:     Size  Location     Type
  3198 ;;  Logic           1    4[COMMON] unsigned char 
  3199 ;;  CurTimer        2    5[COMMON] unsigned int 
  3200 ;; Return value:  Size  Location     Type
  3201 ;;                  2    2[COMMON] unsigned int 
  3202 ;; Registers used:
  3203 ;;		wreg, status,2
  3204 ;; Tracked objects:
  3205 ;;		On entry : 20/0
  3206 ;;		On exit  : 20/0
  3207 ;;		Unchanged: FFFDF/0
  3208 ;; Data sizes:     COMMON   BANK0   BANK1
  3209 ;;      Params:         2       0       0
  3210 ;;      Locals:         3       0       0
  3211 ;;      Temps:          0       0       0
  3212 ;;      Totals:         5       0       0
  3213 ;;Total ram usage:        5 bytes
  3214 ;; Hardware stack levels used:    1
  3215 ;; Hardware stack levels required when called:    1
  3216 ;; This function calls:
  3217 ;;		Nothing
  3218 ;; This function is called by:
  3219 ;;		_get_RFID
  3220 ;; This function uses a non-reentrant model
  3221 ;;
  3222  0350                     _timerOut:	
  3223                           
  3224                           ; Regs used in _timerOut: [wreg+status,2]
  3225                           ;timerOut@Logic stored from wreg
  3226  0350  00F4               	movwf	timerOut@Logic
  3227                           
  3228                           ;rfid125.c: 7: unsigned int CurTimer;
  3229                           ;rfid125.c: 8: T0ON = 0;
  3230  0351  119F               	bcf	31,3
  3231                           
  3232                           ;rfid125.c: 9: TMR0 = 0;
  3233  0352  0181               	clrf	1	;volatile
  3234                           
  3235                           ;rfid125.c: 10: T0IF = 0;
  3236  0353  110B               	bcf	11,2
  3237                           
  3238                           ;rfid125.c: 11: T0ON = 1;
  3239  0354  159F               	bsf	31,3
  3240  0355                     l6084:	
  3241                           ;rfid125.c: 12: while(RA5==Logic){
  3242                           
  3243  0355  3000               	movlw	0
  3244  0356  1A85               	btfsc	5,5
  3245  0357  3001               	movlw	1
  3246  0358  0674               	xorwf	timerOut@Logic,w
  3247  0359  1D03               	btfss	3,2
  3248  035A  2B6A               	goto	l6086
  3249                           
  3250                           ;rfid125.c: 13: CurTimer= (0 <<8 )| TMR0;
  3251  035B  01F5               	clrf	timerOut@CurTimer
  3252  035C  01F6               	clrf	timerOut@CurTimer+1
  3253  035D  0801               	movf	1,w	;volatile
  3254  035E  04F5               	iorwf	timerOut@CurTimer,f
  3255                           
  3256                           ;rfid125.c: 14: if(CurTimer>time)
  3257  035F  0876               	movf	timerOut@CurTimer+1,w
  3258  0360  0273               	subwf	timerOut@time+1,w
  3259  0361  1D03               	skipz
  3260  0362  2B65               	goto	u995
  3261  0363  0875               	movf	timerOut@CurTimer,w
  3262  0364  0272               	subwf	timerOut@time,w
  3263  0365                     u995:	
  3264  0365  1803               	skipnc
  3265  0366  2B55               	goto	l6084
  3266                           
  3267                           ;rfid125.c: 15: return 0;
  3268  0367  01F2               	clrf	?_timerOut
  3269  0368  01F3               	clrf	?_timerOut+1
  3270  0369  0008               	return
  3271  036A                     l6086:	
  3272                           
  3273                           ;rfid125.c: 16: }
  3274                           ;rfid125.c: 17: return CurTimer;
  3275  036A  0876               	movf	timerOut@CurTimer+1,w
  3276  036B  00F3               	movwf	?_timerOut+1
  3277  036C  0875               	movf	timerOut@CurTimer,w
  3278  036D  00F2               	movwf	?_timerOut
  3279  036E  0008               	return
  3280  036F                     __end_of_timerOut:	
  3281                           
  3282                           	psect	text518
  3283  036F                     __ptext518:	
  3284 ;; =============== function _timerOut ends ============
  3285                           
  3286                           
  3287 ;; *************** function _comArr *****************
  3288 ;; Defined at:
  3289 ;;		line 52 in file "ms82_eeprom.c"
  3290 ;; Parameters:    Size  Location     Type
  3291 ;;  arr1            1    wreg     PTR unsigned char 
  3292 ;;		 -> keyID(5), 
  3293 ;;  arr2            1    2[COMMON] PTR unsigned char 
  3294 ;;		 -> buffTag(25), 
  3295 ;;  len1            1    3[COMMON] unsigned char 
  3296 ;;  len2            1    4[COMMON] unsigned char 
  3297 ;; Auto vars:     Size  Location     Type
  3298 ;;  arr1            1    8[COMMON] PTR unsigned char 
  3299 ;;		 -> keyID(5), 
  3300 ;;  i               1    9[COMMON] unsigned char 
  3301 ;; Return value:  Size  Location     Type
  3302 ;;                  1    wreg      unsigned char 
  3303 ;; Registers used:
  3304 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3305 ;; Tracked objects:
  3306 ;;		On entry : 20/0
  3307 ;;		On exit  : 20/0
  3308 ;;		Unchanged: FFEDF/0
  3309 ;; Data sizes:     COMMON   BANK0   BANK1
  3310 ;;      Params:         3       0       0
  3311 ;;      Locals:         2       0       0
  3312 ;;      Temps:          3       0       0
  3313 ;;      Totals:         8       0       0
  3314 ;;Total ram usage:        8 bytes
  3315 ;; Hardware stack levels used:    1
  3316 ;; Hardware stack levels required when called:    1
  3317 ;; This function calls:
  3318 ;;		Nothing
  3319 ;; This function is called by:
  3320 ;;		_id_search
  3321 ;; This function uses a non-reentrant model
  3322 ;;
  3323  036F                     _comArr:	
  3324                           
  3325                           ; Regs used in _comArr: [wreg-fsr0h+status,2+status,0]
  3326                           ;comArr@arr1 stored from wreg
  3327  036F  00F8               	movwf	comArr@arr1
  3328                           
  3329                           ;ms82_eeprom.c: 53: unsigned char i;
  3330                           ;ms82_eeprom.c: 55: if(len1!=len2)
  3331  0370  0873               	movf	comArr@len1,w
  3332  0371  0674               	xorwf	comArr@len2,w
  3333  0372  1D03               	btfss	3,2
  3334                           
  3335                           ;ms82_eeprom.c: 56: return 0;
  3336  0373  3400               	retlw	0
  3337                           
  3338                           ;ms82_eeprom.c: 57: else{
  3339                           ;ms82_eeprom.c: 58: for(i=0;i<len1;i++){
  3340  0374  01F9               	clrf	comArr@i
  3341  0375                     l6052:	
  3342  0375  0873               	movf	comArr@len1,w
  3343  0376  0279               	subwf	comArr@i,w
  3344                           
  3345                           ;ms82_eeprom.c: 59: if(*(arr1+i) != *(arr2+i)){
  3346  0377  0879               	movf	comArr@i,w
  3347  0378  1803               	btfsc	3,0
  3348  0379  2B8A               	goto	L5
  3349  037A  0772               	addwf	comArr@arr2,w
  3350  037B  00F5               	movwf	??_comArr
  3351  037C  0084               	movwf	4
  3352  037D  1383               	bcf	3,7	;select IRP bank0
  3353  037E  0800               	movf	0,w
  3354  037F  00F6               	movwf	??_comArr+1
  3355  0380  0879               	movf	comArr@i,w
  3356  0381  0778               	addwf	comArr@arr1,w
  3357  0382  00F7               	movwf	??_comArr+2
  3358  0383  0084               	movwf	4
  3359  0384  0800               	movf	0,w
  3360  0385  0676               	xorwf	??_comArr+1,w
  3361  0386  1D03               	btfss	3,2
  3362  0387  3400               	retlw	0
  3363  0388  0AF9               	incf	comArr@i,f
  3364  0389  2B75               	goto	l6052
  3365  038A                     L5:	
  3366                           ;ms82_eeprom.c: 61: }
  3367                           ;ms82_eeprom.c: 62: }
  3368                           ;ms82_eeprom.c: 63: if(i==len1)
  3369                           
  3370  038A  0673               	xorwf	comArr@len1,w
  3371  038B  1903               	btfsc	3,2
  3372                           
  3373                           ;ms82_eeprom.c: 64: return 1;
  3374  038C  3401               	retlw	1
  3375  038D  3400               	retlw	0
  3376  038E                     __end_of_comArr:	
  3377                           
  3378                           	psect	text519
  3379  048A                     __ptext519:	
  3380 ;; =============== function _comArr ends ============
  3381                           
  3382                           
  3383 ;; *************** function _eepromReadByte *****************
  3384 ;; Defined at:
  3385 ;;		line 7 in file "ms82_eeprom.c"
  3386 ;; Parameters:    Size  Location     Type
  3387 ;;  EEAddr          1    wreg     unsigned char 
  3388 ;; Auto vars:     Size  Location     Type
  3389 ;;  EEAddr          1    2[COMMON] unsigned char 
  3390 ;;  ReEepromData    1    3[COMMON] unsigned char 
  3391 ;; Return value:  Size  Location     Type
  3392 ;;                  1    wreg      unsigned char 
  3393 ;; Registers used:
  3394 ;;		wreg
  3395 ;; Tracked objects:
  3396 ;;		On entry : 0/20
  3397 ;;		On exit  : 20/20
  3398 ;;		Unchanged: FFFDF/0
  3399 ;; Data sizes:     COMMON   BANK0   BANK1
  3400 ;;      Params:         0       0       0
  3401 ;;      Locals:         2       0       0
  3402 ;;      Temps:          0       0       0
  3403 ;;      Totals:         2       0       0
  3404 ;;Total ram usage:        2 bytes
  3405 ;; Hardware stack levels used:    1
  3406 ;; Hardware stack levels required when called:    1
  3407 ;; This function calls:
  3408 ;;		Nothing
  3409 ;; This function is called by:
  3410 ;;		_eepromReadBlock
  3411 ;;		_main
  3412 ;; This function uses a non-reentrant model
  3413 ;;
  3414  048A                     _eepromReadByte:	
  3415                           
  3416                           ; Regs used in _eepromReadByte: [wreg]
  3417                           ;eepromReadByte@EEAddr stored from wreg
  3418  048A  00F2               	movwf	eepromReadByte@EEAddr
  3419                           
  3420                           ;ms82_eeprom.c: 8: unsigned char ReEepromData;
  3421                           ;ms82_eeprom.c: 10: EEADR = EEAddr;
  3422  048B  1683               	bsf	3,5	;RP0=1, select bank1
  3423  048C  009B               	movwf	27	;volatile
  3424                           
  3425                           ;ms82_eeprom.c: 11: RD = 1;
  3426  048D  141C               	bsf	28,0
  3427                           
  3428                           ;ms82_eeprom.c: 12: ReEepromData = EEDAT;
  3429  048E  081A               	movf	26,w	;volatile
  3430  048F  00F3               	movwf	eepromReadByte@ReEepromData
  3431                           
  3432                           ;ms82_eeprom.c: 13: RD = 0;
  3433  0490  101C               	bcf	28,0
  3434                           
  3435                           ;ms82_eeprom.c: 14: return ReEepromData;
  3436  0491  0008               	return
  3437  0492                     __end_of_eepromReadByte:	
  3438                           
  3439                           	psect	text520
  3440  046C                     __ptext520:	
  3441 ;; =============== function _eepromReadByte ends ============
  3442                           
  3443                           
  3444 ;; *************** function _int_init *****************
  3445 ;; Defined at:
  3446 ;;		line 66 in file "sysinit.c"
  3447 ;; Parameters:    Size  Location     Type
  3448 ;;		None
  3449 ;; Auto vars:     Size  Location     Type
  3450 ;;		None
  3451 ;; Return value:  Size  Location     Type
  3452 ;;		None               void
  3453 ;; Registers used:
  3454 ;;		status,2
  3455 ;; Tracked objects:
  3456 ;;		On entry : 20/20
  3457 ;;		On exit  : 20/20
  3458 ;;		Unchanged: FFFDF/0
  3459 ;; Data sizes:     COMMON   BANK0   BANK1
  3460 ;;      Params:         0       0       0
  3461 ;;      Locals:         0       0       0
  3462 ;;      Temps:          0       0       0
  3463 ;;      Totals:         0       0       0
  3464 ;;Total ram usage:        0 bytes
  3465 ;; Hardware stack levels used:    1
  3466 ;; Hardware stack levels required when called:    1
  3467 ;; This function calls:
  3468 ;;		Nothing
  3469 ;; This function is called by:
  3470 ;;		_main
  3471 ;; This function uses a non-reentrant model
  3472 ;;
  3473  046C                     _int_init:	
  3474                           
  3475                           ;sysinit.c: 72: INTCON = 0B00000000;
  3476                           
  3477                           ; Regs used in _int_init: [status,2]
  3478  046C  018B               	clrf	11	;volatile
  3479                           
  3480                           ;sysinit.c: 73: PIE1 = 0B00000000;
  3481  046D  018C               	clrf	12	;volatile
  3482                           
  3483                           ;sysinit.c: 74: PIR1 = 0B00000000;
  3484  046E  1283               	bcf	3,5	;RP0=0, select bank0
  3485  046F  018C               	clrf	12	;volatile
  3486                           
  3487                           ;sysinit.c: 87: T0IF = 0;
  3488  0470  110B               	bcf	11,2
  3489                           
  3490                           ;sysinit.c: 88: T0IE = 0;
  3491  0471  128B               	bcf	11,5
  3492                           
  3493                           ;sysinit.c: 92: TMR2IF = 0;
  3494  0472  108C               	bcf	12,1
  3495                           
  3496                           ;sysinit.c: 93: TMR2IE = 1;
  3497  0473  1683               	bsf	3,5	;RP0=1, select bank1
  3498  0474  148C               	bsf	12,1
  3499                           
  3500                           ;sysinit.c: 99: PEIE = 0;
  3501  0475  130B               	bcf	11,6
  3502                           
  3503                           ;sysinit.c: 101: GIE = 1;
  3504  0476  178B               	bsf	11,7
  3505  0477  0008               	return
  3506  0478                     __end_of_int_init:	
  3507                           
  3508                           	psect	text521
  3509  04A0                     __ptext521:	
  3510 ;; =============== function _int_init ends ============
  3511                           
  3512                           
  3513 ;; *************** function _timer_init *****************
  3514 ;; Defined at:
  3515 ;;		line 44 in file "sysinit.c"
  3516 ;; Parameters:    Size  Location     Type
  3517 ;;		None
  3518 ;; Auto vars:     Size  Location     Type
  3519 ;;		None
  3520 ;; Return value:  Size  Location     Type
  3521 ;;		None               void
  3522 ;; Registers used:
  3523 ;;		wreg
  3524 ;; Tracked objects:
  3525 ;;		On entry : 20/20
  3526 ;;		On exit  : 20/20
  3527 ;;		Unchanged: FFFDF/0
  3528 ;; Data sizes:     COMMON   BANK0   BANK1
  3529 ;;      Params:         0       0       0
  3530 ;;      Locals:         0       0       0
  3531 ;;      Temps:          0       0       0
  3532 ;;      Totals:         0       0       0
  3533 ;;Total ram usage:        0 bytes
  3534 ;; Hardware stack levels used:    1
  3535 ;; Hardware stack levels required when called:    1
  3536 ;; This function calls:
  3537 ;;		Nothing
  3538 ;; This function is called by:
  3539 ;;		_main
  3540 ;; This function uses a non-reentrant model
  3541 ;;
  3542  04A0                     _timer_init:	
  3543                           
  3544                           ;sysinit.c: 46: OPTION = 0B00000011;
  3545                           
  3546                           ; Regs used in _timer_init: [wreg]
  3547  04A0  3003               	movlw	3
  3548  04A1  0081               	movwf	1	;volatile
  3549  04A2  0008               	return
  3550  04A3                     __end_of_timer_init:	
  3551                           
  3552                           	psect	text522
  3553  044F                     __ptext522:	
  3554 ;; =============== function _timer_init ends ============
  3555                           
  3556                           
  3557 ;; *************** function _gpio_init *****************
  3558 ;; Defined at:
  3559 ;;		line 32 in file "sysinit.c"
  3560 ;; Parameters:    Size  Location     Type
  3561 ;;		None
  3562 ;; Auto vars:     Size  Location     Type
  3563 ;;		None
  3564 ;; Return value:  Size  Location     Type
  3565 ;;		None               void
  3566 ;; Registers used:
  3567 ;;		wreg, status,2
  3568 ;; Tracked objects:
  3569 ;;		On entry : 20/20
  3570 ;;		On exit  : 20/20
  3571 ;;		Unchanged: FFFDF/0
  3572 ;; Data sizes:     COMMON   BANK0   BANK1
  3573 ;;      Params:         0       0       0
  3574 ;;      Locals:         0       0       0
  3575 ;;      Temps:          0       0       0
  3576 ;;      Totals:         0       0       0
  3577 ;;Total ram usage:        0 bytes
  3578 ;; Hardware stack levels used:    1
  3579 ;; Hardware stack levels required when called:    1
  3580 ;; This function calls:
  3581 ;;		Nothing
  3582 ;; This function is called by:
  3583 ;;		_main
  3584 ;; This function uses a non-reentrant model
  3585 ;;
  3586  044F                     _gpio_init:	
  3587                           
  3588                           ;sysinit.c: 34: PORTA = 0B00000000;
  3589                           
  3590                           ; Regs used in _gpio_init: [wreg+status,2]
  3591  044F  1283               	bcf	3,5	;RP0=0, select bank0
  3592  0450  0185               	clrf	5	;volatile
  3593                           
  3594                           ;sysinit.c: 35: TRISA = 0B01110011;
  3595  0451  3073               	movlw	115
  3596  0452  1683               	bsf	3,5	;RP0=1, select bank1
  3597  0453  0085               	movwf	5	;volatile
  3598                           
  3599                           ;sysinit.c: 36: WPUA = 0B10000000;
  3600  0454  3080               	movlw	128
  3601  0455  0095               	movwf	21	;volatile
  3602                           
  3603                           ;sysinit.c: 37: PORTC = 0B00000010;
  3604  0456  3002               	movlw	2
  3605  0457  1283               	bcf	3,5	;RP0=0, select bank0
  3606  0458  0087               	movwf	7	;volatile
  3607                           
  3608                           ;sysinit.c: 38: TRISC = 0B11111110;
  3609  0459  30FE               	movlw	254
  3610  045A  1683               	bsf	3,5	;RP0=1, select bank1
  3611  045B  0087               	movwf	7	;volatile
  3612                           
  3613                           ;sysinit.c: 39: WPUC = 0B00000000;
  3614  045C  0193               	clrf	19	;volatile
  3615  045D  0008               	return
  3616  045E                     __end_of_gpio_init:	
  3617                           
  3618                           	psect	text523
  3619  0499                     __ptext523:	
  3620 ;; =============== function _gpio_init ends ============
  3621                           
  3622                           
  3623 ;; *************** function _ISR *****************
  3624 ;; Defined at:
  3625 ;;		line 85 in file "MAIN.C"
  3626 ;; Parameters:    Size  Location     Type
  3627 ;;		None
  3628 ;; Auto vars:     Size  Location     Type
  3629 ;;		None
  3630 ;; Return value:  Size  Location     Type
  3631 ;;		None               void
  3632 ;; Registers used:
  3633 ;;		None
  3634 ;; Tracked objects:
  3635 ;;		On entry : 0/0
  3636 ;;		On exit  : 0/0
  3637 ;;		Unchanged: FFFFF/0
  3638 ;; Data sizes:     COMMON   BANK0   BANK1
  3639 ;;      Params:         0       0       0
  3640 ;;      Locals:         0       0       0
  3641 ;;      Temps:          2       0       0
  3642 ;;      Totals:         2       0       0
  3643 ;;Total ram usage:        2 bytes
  3644 ;; Hardware stack levels used:    1
  3645 ;; This function calls:
  3646 ;;		Nothing
  3647 ;; This function is called by:
  3648 ;;		Interrupt level 1
  3649 ;; This function uses a non-reentrant model
  3650 ;;
  3651  0499                     _ISR:	
  3652  0499  0871               	movf	??_ISR+1,w
  3653  049A  008A               	movwf	10
  3654  049B  0E70               	swapf	??_ISR^(0+-128),w
  3655  049C  0083               	movwf	3
  3656  049D  0EFE               	swapf	126,f
  3657  049E  0E7E               	swapf	126,w
  3658  049F  0009               	retfie
  3659  04A0                     __end_of_ISR:	
  3660                           
  3661                           	psect	intentry
  3662  0004                     __pintentry:	
  3663                           ; Regs used in _ISR: []
  3664                           
  3665  0004                     interrupt_function:	
  3666  007E                     saved_w	set	btemp
  3667  0004  00FE               	movwf	btemp
  3668  0005  0E03               	swapf	3,w
  3669  0006  00F0               	movwf	??_ISR
  3670  0007  080A               	movf	10,w
  3671  0008  00F1               	movwf	??_ISR+1
  3672  0009  2C99               	ljmp	_ISR
  3673                           
  3674                           	psect	text524
  3675  0000                     __ptext524:	
  3676 ;; =============== function _ISR ends ============
  3677                           
  3678  007E                     btemp	set	126	;btemp
  3679  007E                     wtemp0	set	126


HI-TECH Software PICC Macro Assembler V9.83 build 10920 
Symbol Table                                                                                   Sat Feb 22 12:26:23 2020

                         pc 0002              ___bmul@product 0073                          _RD 04E0  
                        _WR 04E8                          fsr 0004                         _C1R 08CA  
                       _C2R 08D2                         l790 0000                         l793 0000  
                       l787 0486                         l796 0000                         l799 0000  
                       _GIE 005F                         _RA3 002B                         _RC0 0038  
                       _RA5 002D                         _HTS 047A                         _ISR 0499  
                       _SR0 0CF6                         _SR1 0CF7                         _VR0 08C0  
                       _VR1 08C1                         _VR2 08C2                         _VR3 08C3  
                       u995 0365                         _VRR 08C5                         fsr0 0004  
                       indf 0000            get_RFID@even_col 004A            get_RFID@even_row 004B  
               main@idState 0055                        S6688 0492                        ?_ISR 0070  
                      _C1OE 08CD                        l1600 0302                        l1603 0000  
                      _C2OE 08D5                        _C1ON 08CF                        l4121 0000  
                      l1609 0000                        _C2ON 08D7                        l4133 0000  
                      l4142 0000                        l4150 0000                        l6000 0000  
                      l6002 0000                        l6010 0000                        l1594 0000  
                      l2459 0029                        l4171 0233                        l6004 0000  
                      l6020 0000                        l6012 0000                        l1588 0000  
                      l6100 0000                        l1597 02F3                        l6006 0000  
                      l6022 0000                        l6014 0000                        l6030 0000  
                      l3294 0348                        l6110 0000                        l6102 0000  
                      l2478 0075                        l4158 0000                        l6008 0000  
                      l6024 0000                        l6016 0000                        l3296 034D  
                      l6112 0000                        l6104 0000                        l6120 0000  
                      l6200 0000                        l3297 0000                        l6018 0000  
                      l6026 0000                        l6034 0000                        l6114 0000  
                      l6106 0000                        l6130 0000                        l6122 0000  
                      l6202 0307                        l6210 000E                        l4194 0261  
                      l2499 00D5                        l6028 0000                        l6052 0375  
                      l6108 0000                        l6116 0000                        l6132 0000  
                      l6124 0460                        l6204 0000                        l6300 0084  
                      l6220 0000                        l6212 0000                        l4196 0279  
                      l6070 0000                        l6118 0000                        l6206 0000  
                      l4198 028D                        l6072 0000                        l6152 0000  
                      l6160 0000                        l6400 0000                        l6312 0088  
                      l6240 0031                        l6232 0000                        l6208 0000  
                      l6066 0000                        l6090 0000                        l6146 02D9  
                      l6154 02EC                        l6138 0000                        l6162 0000  
                      l6410 0000                        l6330 00A5                        l6314 0000  
                      l6242 0000                        l6076 0000                        l6084 0355  
                      l6068 0000                        l6092 0000                        l6172 0000  
                      l6164 03B2                        l6412 0000                        l6404 011F  
                      l6340 00B0                        l6316 0000                        l6260 0000  
                      l6252 0040                        l6228 0000                        l6500 0324  
                      l6086 036A                        l6078 0000                        l6094 0000  
                      l4902 03B8                        l6158 0000                        l6182 0000  
                      l6190 0000                        l6414 0000                        l6406 0000  
                      l6350 00C1                        l6342 0000                        l6334 0000  
                      l6326 009C                        l6254 0000                        l6270 0057  
                      l6510 0000                        l6502 0000                        l6096 0000  
                      l6176 0000                        l6168 0000                        l6184 0000  
                      l6192 0421                        l6416 0000                        l6408 0129  
                      l6352 0000                        l6344 0000                        l6328 0000  
                      l6280 0000                        l6256 0049                        l6432 0431  
                      l6440 03C9                        l6600 0209                        l6520 0000  
                      l6512 0000                        l6504 0000                        l4905 0000  
                      l6098 0000                        l6178 03C5                        l6186 0000  
                      l6194 0000                        l6354 00CA                        l6346 00B7  
                      l6282 0000                        l6274 0061                        l6290 0079  
                      l6266 0054                        l6434 0000                        l6610 0000  
                      l6530 0000                        l6522 0000                        l6514 0000  
                      l6506 0000                        l6196 02F7                        l6380 0000  
                      l6364 0000                        l6356 0000                        l6292 0000  
                      l6276 0000                        l6268 0000                        l6428 0000  
                      l6460 040F                        l6620 0000                        l6612 0000  
                      l6540 0000                        l6532 0000                        l6524 0000  
                      l6516 0000                        l6508 0000                        l6198 0000  
                      l6390 0000                        l6382 0000                        l6358 0000  
                      l6366 00D8                        l6294 007E                        l6278 006A  
                      l6454 0000                        l6470 0000                        l6462 0000  
                      l6606 0000                        l6614 0223                        l6550 01B1  
                      l6622 0240                        l6534 0193                        l6518 0000  
                      l6392 0000                        l6368 0000                        l6288 0000  
                      l6448 0000                        l6472 0000                        l6464 0000  
                      l6480 0000                        l6632 025B                        l6640 0274  
                      l6624 0000                        l6560 01C2                        l6552 0000  
                      l6544 01A4                        l6528 0187                        l6378 00E3  
                      l6298 002C                        l6458 0000                        l6474 0000  
                      l6466 0000                        l6490 0000                        l6482 0000  
                      l6650 028E                        l6634 0264                        l6626 024D  
                      l6570 0000                        l6562 0000                        l6554 0000  
                      l6618 0228                        l6538 0198                        l6388 00ED  
                      l6492 0000                        l6484 0000                        l6644 027A  
                      l6580 0000                        l6572 01D6                        l6556 0000  
                      l4869 0000                        l6478 03F9                        l6486 0000  
                      l6494 0000                        l6638 0269                        l6590 0000  
                      l6582 0000                        l6566 0000                        l6558 0000  
                      l4895 0000                        l6488 0000                        l6584 01EB  
                      l6568 0000                        l6498 0000                        l6594 0000  
                      l6578 0000                        l6596 0000                        l6598 0204  
                      _EEIF 0067                        _ANS0 08F0                        _ANS1 08F1  
                      _ANS2 08F2                        _ANS3 08F3                        _ANS4 08F4  
                      _ANS5 08F5                        _ANS6 08F6                        _ANS7 08F7  
                      _ANS8 08F8                        _ANS9 08F9                        _P1OE 0090  
                      _T0IE 005D                        _T0IF 005A                        u1065 02DF  
                      _T0ON 00FB                        _IOCB 0116                        u1524 00F6  
                      u1525 00F4                        _PIE1 008C                        u1907 023A  
                      u1917 0247                        u1927 043A                        u1855 0258  
                      u1937 030B                        _PEIE 005E                        u1897 016B  
                      _PR2H 0092                        _PR2L 0091                        _PIR1 000C  
                      _TMR0 0001                        _STRA 0CE8                        _STRB 0CE9  
                      _STRC 0CEA                        _STRD 0CEB                        _WREN 0C62  
                      _WPUA 0095                        _WPUB 0115                        _WPUC 0093  
                      _main 0155                        btemp 007E                        start 000A  
         ___bmul@multiplier 0074                       ??_ISR 0070                       _C1CH0 08C8  
                     _C1CH1 08C9                       _C2CH0 08D0                       _C2CH1 08D1  
                     _C1SEN 0CF5                       _C2REN 0CF4                       _C1POL 08CC  
                     _C2POL 08D4                       _C1OUT 08CE                       _C2OUT 08D6  
                     ?_main 0070             __end_of___lbdiv 03C7                       _EEADR 009B  
                     _EEDAT 009A                       _ANS10 08FA                       _ANS11 08FB  
                     _P1CON 0016                       _EEPGD 0C67                       _ANSEL 011E  
                     _P1POL 0099                       _IOCB4 08B4                       _IOCB5 08B5  
                     _IOCB6 08B6                       _IOCB7 08B7                       _T1GSS 08D9  
           __end_of___lwmod 02F1                       _VP6EN 08C4                       _TMR2H 0013  
                     _TMR2L 0011                       _PORTA 0005                       _PORTC 0007  
                     _SRCON 019E                       _PULSR 0CF2                       _PULSS 0CF3  
                     _TRISA 0085                       _TRISC 0087                       _VRCON 0118  
                     _WPUB4 08AC                       _WPUB5 08AD                       _WPUB6 08AE  
                     _WPUB7 08AF                       _beep2 03F8    __size_of_eepromReadBlock 0011  
                     _keyID 005E                       pclath 000A                       status 0003  
                     wtemp0 007E             ___lbdiv@divisor 0072             ___lbdiv@counter 0074  
      __size_of_delay_x10ms 0010            ??_eepromReadByte 0072            _eepromWriteBlock 040D  
              __end_of_main 0292                      ??_main 0052            eepromReadBlock@i 0078  
                    ?_beep2 0075                      _C1VREN 08C7                      _C2VREN 08C6  
                    _C2SYNC 08D8                      _EEADRH 010F                      _EEDATH 010E  
                    _EECON1 009C                      _P1ADTH 0014    __size_of_eepromWriteByte 0021  
                    _P1ADTL 000E                      _ANSELH 011F                      _MC1OUT 08DF  
                    _MC2OUT 08DE                      _T2CON0 0012                      _T2CON1 009E  
                    i1l4130 0000                      _INTCON 000B                      _OSCCON 008F  
                    _TMR2IE 0461                      _TMR2IF 0061                      _OPTION 0081  
                    _TMR2ON 0092                ?_SET_EPWM_ON 0070            __end_of_get_RFID 0143  
          __end_of_id_clear 0331          get_RFID@timeOutVal 004F                      ___bmul 045E  
                 ??___lbdiv 0073                      _comArr 036F                   ??___lwmod 0076  
                    _kepTag 005C            __end_of_int_init 0478            __end_of_setState 0482  
                    saved_w 007E            __end_of_timerOut 036F         eepromReadBlock@buff 0074  
          ___lbdiv@dividend 0073            __end_of_sys_init 048A           ??_eepromReadBlock 0076  
       ___bmul@multiplicand 0072              __pcstackCOMMON 0070                __pidataBANK0 038E  
             __end_of_beep2 040D            ___lbdiv@quotient 0075          __size_of_id_search 001A  
                   ??_beep2 0076                  __pbssBANK0 0058          __size_of_gpio_init 000F  
         ??_eepromWriteByte 0073                  __pmaintext 0155                     ?___bmul 0072  
                   ?_comArr 0072                  __pintentry 0004                     _CM1CON0 0119  
                   _CM2CON0 011A                     _CM2CON1 011B                  _id_replate 0292  
                 ?_get_RFID 0070                   ?_id_clear 0042    __end_of_eepromWriteBlock 041F  
                   _PSTRCON 019D                     _STRSYNC 0CEC                   ?_int_init 0070  
  get_RFID@RF_serial_55bits 003E           __end_of_id_search 03E1                 setState@stt 0074  
      __size_of_SET_EPWM_ON 001F                   ?_setState 0072                   ?_timerOut 0072  
           __size_of___bmul 000E                     ___lbdiv 03AC                     ___lwmod 02CD  
           __size_of_comArr 001F                     _buffTag 0025           __end_of_gpio_init 045E  
                 ?_sys_init 0070                __size_of_ISR 0007                     _mtState 005D  
                   comArr@i 0079                  ??_get_RFID 0077                  ??_id_clear 007C  
                   _timeOut 0058                  comArr@arr1 0078                  comArr@arr2 0072  
                comArr@len1 0073                  comArr@len2 0074                     main@tmp 0056  
      end_of_initialization 03F6               ??_delay_x10ms 0072                     init_ram 0444  
                get_RFID@ii 0051                  ??_int_init 0072                  ??_setState 0074  
       eepromWriteBlock@len 0077                  ??_timerOut 0074       get_RFID@flag_RFID_syn 0049  
                id_search@i 003F                  _timer_init 04A0                 ?_id_replate 003E  
                ??_sys_init 0072             _eepromReadBlock 041F         __end_of_delay_x10ms 0440  
            __end_of___bmul 046C              __end_of_comArr 038E     __size_of_eepromReadByte 0008  
      eepromReadByte@EEAddr 0072         start_initialization 03E1                 __end_of_ISR 04A0  
           _eepromWriteByte 02F1               setState@_tOut 0072  eepromReadByte@ReEepromData 0073  
       __size_of_id_replate 0034                    ??___bmul 0073                    ??_comArr 0075  
               __pdataBANK0 0020     __end_of_eepromReadBlock 0430               id_clear@F1098 0020  
               ?_timer_init 0070          eepromReadBlock@len 0075               __pcstackBANK0 003E  
             id_clear@idMax 0042               id_clear@idMin 0048           ?_eepromWriteBlock 0076  
         __size_of_get_RFID 0138           __size_of_id_clear 001F          ??_eepromWriteBlock 0078  
               _delay_x10ms 0430           __size_of_int_init 000C                    ?___lbdiv 0072  
         __size_of_setState 000A                   __ptext510 041F                   __ptext502 0312  
                 __ptext511 0482                   __ptext503 0292                   __ptext520 046C  
                 __ptext512 03AC                   __ptext504 03F8                   __ptext521 04A0  
                 __ptext513 02CD                   __ptext505 040D                   __ptext522 044F  
                 __ptext514 045E                   __ptext506 03C7                   __ptext523 0499  
                 __ptext515 0478                   __ptext507 0430                   __ptext524 0000  
                 __ptext516 0331                   __ptext508 000B                   __ptext517 0350  
                 __ptext509 02F1                   __ptext518 036F                   __ptext519 048A  
                 _id_search 03C7                    ?___lwmod 0072           __size_of_timerOut 001F  
                 __pswtext1 0492     __end_of_eepromWriteByte 0312           __size_of_sys_init 0008  
                 _gpio_init 044F              __size_of_beep2 0015           interrupt_function 0004  
             ??_SET_EPWM_ON 0072         __size_of_timer_init 0003                   get_RFID@i 004D  
                 get_RFID@j 004C                  ?_id_search 007A                delay_x10ms@t 0074  
          timerOut@CurTimer 0075              _eepromReadByte 048A            ?_eepromReadBlock 0074  
              ??_id_replate 0040                  ?_gpio_init 0070          __end_of_id_replate 02C6  
                 init_fetch 0440         __end_of_SET_EPWM_ON 0350              id_replate@Cont 003E  
    __end_of_eepromReadByte 0492            __size_of___lbdiv 001B              id_replate@buff 003F  
          __size_of___lwmod 0024           id_search@id_input 003E            ?_eepromWriteByte 0072  
   eepromReadBlock@addStart 0077                    beep2@sel 0076                    beep2@rep 0075  
                  _get_RFID 000B                    _id_clear 0312               __size_of_main 013D  
                  _int_init 046C               id_search@buff 007A                    _setState 0478  
         eepromWriteBlock@i 007A                    _timeTick 005A                    _timerOut 0350  
               ??_id_search 007B             ?_eepromReadByte 0070                    main@idop 0057  
              ??_timer_init 0072                    _sys_init 0482    eepromWriteBlock@addStart 0079  
               ??_gpio_init 0072                 id_clear@tmp 0043                    intlevel1 0000  
          ___lwmod@dividend 0074                ?_delay_x10ms 0070                 _SET_EPWM_ON 0331  
        __end_of_timer_init 04A3        eepromWriteBlock@buff 0076   __size_of_eepromWriteBlock 0012  
     eepromWriteByte@EEAddr 0075       eepromWriteByte@EEData 0072      get_RFID@flag_RFID_last 004E  
              id_replate@id 007B             ___lwmod@divisor 0072             ___lwmod@counter 0076  
             timerOut@Logic 0074                timerOut@time 0072  
